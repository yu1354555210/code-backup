(global["webpackJsonp"]=global["webpackJsonp"]||[]).push([["common/vendor"],{1:
/*!********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-qq/dist/index.js ***!
  \********************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createApp=Me,e.createComponent=Ke,e.createPage=Je,e.default=void 0;var r=o(n(/*! vue */2));function o(t){return t&&t.__esModule?t:{default:t}}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){f(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){return l(t)||u(t,e)||g(t,e)||c()}function c(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function u(t,e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0)if(n.push(a.value),e&&n.length===e)break}catch(c){o=!0,i=c}finally{try{r||null==s["return"]||s["return"]()}finally{if(o)throw i}}return n}}function l(t){if(Array.isArray(t))return t}function f(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function d(t,e,n){return e&&h(t.prototype,e),n&&h(t,n),t}function v(t){return _(t)||m(t)||g(t)||y()}function y(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function g(t,e){if(t){if("string"===typeof t)return b(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(t,e):void 0}}function m(t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}function _(t){if(Array.isArray(t))return b(t)}function b(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var w=Object.prototype.toString,O=Object.prototype.hasOwnProperty;function S(t){return"function"===typeof t}function $(t){return"string"===typeof t}function j(t){return"[object Object]"===w.call(t)}function A(t,e){return O.call(t,e)}function x(){}function k(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var P=/-(\w)/g,D=k((function(t){return t.replace(P,(function(t,e){return e?e.toUpperCase():""}))})),E=["invoke","success","fail","complete","returnValue"],C={},U={};function T(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?M(n):n}function M(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function I(t,e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}function L(t,e){Object.keys(e).forEach((function(n){-1!==E.indexOf(n)&&S(e[n])&&(t[n]=T(t[n],e[n]))}))}function N(t,e){t&&e&&Object.keys(e).forEach((function(n){-1!==E.indexOf(n)&&S(e[n])&&I(t[n],e[n])}))}function B(t,e){"string"===typeof t&&j(e)?L(U[t]||(U[t]={}),e):j(t)&&L(C,t)}function R(t,e){"string"===typeof t?j(e)?N(U[t],e):delete U[t]:j(t)&&N(C,t)}function V(t){return function(e){return t(e)||e}}function H(t){return!!t&&("object"===typeof t||"function"===typeof t)&&"function"===typeof t.then}function F(t,e){for(var n=!1,r=0;r<t.length;r++){var o=t[r];if(n)n=Promise.resolve(V(o));else{var i=o(e);if(H(i)&&(n=Promise.resolve(i)),!1===i)return{then:function(){}}}}return n||{then:function(t){return t(e)}}}function z(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["success","fail","complete"].forEach((function(n){if(Array.isArray(t[n])){var r=e[n];e[n]=function(e){F(t[n],e).then((function(t){return S(r)&&r(t)||t}))}}})),e}function q(t,e){var n=[];Array.isArray(C.returnValue)&&n.push.apply(n,v(C.returnValue));var r=U[t];return r&&Array.isArray(r.returnValue)&&n.push.apply(n,v(r.returnValue)),n.forEach((function(t){e=t(e)||e})),e}function G(t){var e=Object.create(null);Object.keys(C).forEach((function(t){"returnValue"!==t&&(e[t]=C[t].slice())}));var n=U[t];return n&&Object.keys(n).forEach((function(t){"returnValue"!==t&&(e[t]=(e[t]||[]).concat(n[t]))})),e}function W(t,e,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),i=3;i<r;i++)o[i-3]=arguments[i];var a=G(t);if(a&&Object.keys(a).length){if(Array.isArray(a.invoke)){var s=F(a.invoke,n);return s.then((function(t){return e.apply(void 0,[z(a,t)].concat(o))}))}return e.apply(void 0,[z(a,n)].concat(o))}return e.apply(void 0,[n].concat(o))}var J={returnValue:function(t){return H(t)?t.then((function(t){return t[1]})).catch((function(t){return t[0]})):t}},K=/^\$|sendNativeEvent|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/,Y=/^create|Manager$/,Q=["createBLEConnection"],X=["createBLEConnection"],Z=/^on|^off/;function tt(t){return Y.test(t)&&-1===Q.indexOf(t)}function et(t){return K.test(t)&&-1===X.indexOf(t)}function nt(t){return Z.test(t)&&"onPush"!==t}function rt(t){return t.then((function(t){return[null,t]})).catch((function(t){return[t]}))}function ot(t){return!(tt(t)||et(t)||nt(t))}function it(t,e){return ot(t)?function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return S(n.success)||S(n.fail)||S(n.complete)?q(t,W.apply(void 0,[t,e,n].concat(o))):q(t,rt(new Promise((function(r,i){W.apply(void 0,[t,e,Object.assign({},n,{success:r,fail:i})].concat(o))}))))}:e}Promise.prototype.finally||(Promise.prototype.finally=function(t){var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){throw n}))}))});var at=1e-4,st=750,ct=!1,ut=0,lt=0;function ft(){var t=wx.getSystemInfoSync(),e=t.platform,n=t.pixelRatio,r=t.windowWidth;ut=r,lt=n,ct="ios"===e}function pt(t,e){if(0===ut&&ft(),t=Number(t),0===t)return 0;var n=t/st*(e||ut);return n<0&&(n=-n),n=Math.floor(n+at),0===n&&(n=1!==lt&&ct?.5:1),t<0?-n:n}var ht={promiseInterceptor:J},dt=Object.freeze({__proto__:null,upx2px:pt,addInterceptor:B,removeInterceptor:R,interceptors:ht}),vt=function(){function t(e,n){var r=this;p(this,t),this.id=e,this.listener={},this.emitCache={},n&&Object.keys(n).forEach((function(t){r.on(t,n[t])}))}return d(t,[{key:"emit",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];var o=this.listener[t];if(!o)return(this.emitCache[t]||(this.emitCache[t]=[])).push(n);o.forEach((function(t){t.fn.apply(t.fn,n)})),this.listener[t]=o.filter((function(t){return"once"!==t.type}))}},{key:"on",value:function(t,e){this._addListener(t,"on",e),this._clearCache(t)}},{key:"once",value:function(t,e){this._addListener(t,"once",e),this._clearCache(t)}},{key:"off",value:function(t,e){var n=this.listener[t];if(n)if(e)for(var r=0;r<n.length;)n[r].fn===e&&(n.splice(r,1),r--),r++;else delete this.listener[t]}},{key:"_clearCache",value:function(t){var e=this.emitCache[t];if(e)for(;e.length>0;)this.emit.apply(this,[t].concat(e.shift()))}},{key:"_addListener",value:function(t,e,n){(this.listener[t]||(this.listener[t]=[])).push({fn:n,type:e})}}]),t}(),yt={},gt=[],mt=0;function _t(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];mt++;var n=new vt(mt,t);return e&&(yt[mt]=n,gt.push(n)),n}function bt(t){if(t){var e=yt[t];return delete yt[t],e}return gt.shift()}var wt={args:function(t,e){var n=_t(t.events).id;t.url&&(t.url=t.url+(-1===t.url.indexOf("?")?"?":"&")+"__id__="+n)},returnValue:function(t,e){t.eventChannel=bt()}};function Ot(t){var e=getCurrentPages(),n=e.length;while(n--){var r=e[n];if(r.$page&&r.$page.fullPath===t)return n}return-1}var St={name:function(t){return"back"===t.exists&&t.delta?"navigateBack":"redirectTo"},args:function(t){if("back"===t.exists&&t.url){var e=Ot(t.url);if(-1!==e){var n=getCurrentPages().length-1-e;n>0&&(t.delta=n)}}}},$t={args:function(t){var e=parseInt(t.current);if(!isNaN(e)){var n=t.urls;if(Array.isArray(n)){var r=n.length;if(r)return e<0?e=0:e>=r&&(e=r-1),e>0?(t.current=n[e],t.urls=n.filter((function(t,r){return!(r<e)||t!==n[e]}))):t.current=n[0],{indicator:!1,loop:!1}}}}},jt={navigateTo:wt,redirectTo:St,previewImage:$t},At=["preloadPage","unPreloadPage","loadSubPackage"],xt=["scanCode","startAccelerometer","stopAccelerometer","onAccelerometerChange","startCompass","onCompassChange","setScreenBrightness","getScreenBrightness","setKeepScreenOn","onUserCaptureScreen","vibrateLong","vibrateShort","createWorker","connectSocket","onSocketOpen","onSocketError","sendSocketMessage","onSocketMessage","closeSocket","onSocketClose","openDocument","updateShareMenu","getShareInfo","createLivePlayerContext","createLivePusherContext","setNavigationBarColor","onMemoryWarning","onNetworkStatusChange","reportMonitor","getLogManager","reportAnalytics"],kt=["success","fail","cancel","complete"];function Pt(t,e,n){return function(r){return e(Et(t,r,n))}}function Dt(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(j(e)){var i=!0===o?e:{};for(var a in S(n)&&(n=n(e,i)||{}),e)if(A(n,a)){var s=n[a];S(s)&&(s=s(e[a],e,i)),s?$(s)?i[s]=e[a]:j(s)&&(i[s.name?s.name:a]=s.value):console.warn("QQ小程序 ".concat(t,"暂不支持").concat(a))}else-1!==kt.indexOf(a)?S(e[a])&&(i[a]=Pt(t,e[a],r)):o||(i[a]=e[a]);return i}return S(e)&&(e=Pt(t,e,r)),e}function Et(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return S(jt.returnValue)&&(e=jt.returnValue(t,e)),Dt(t,e,n,{},r)}function Ct(t,e){if(A(jt,t)){var n=jt[t];return n?function(e,r){var o=n;S(n)&&(o=n(e)),e=Dt(t,e,o.args,o.returnValue);var i=[e];"undefined"!==typeof r&&i.push(r),S(o.name)?t=o.name(e):$(o.name)&&(t=o.name);var a=wx[t].apply(wx,i);return et(t)?Et(t,a,o.returnValue,tt(t)):a}:function(){console.error("QQ小程序 暂不支持".concat(t))}}return e}var Ut=Object.create(null),Tt=["onTabBarMidButtonTap","subscribePush","unsubscribePush","onPush","offPush","share"];function Mt(t){return function(e){var n=e.fail,r=e.complete,o={errMsg:"".concat(t,":fail:暂不支持 ").concat(t," 方法")};S(n)&&n(o),S(r)&&r(o)}}Tt.forEach((function(t){Ut[t]=Mt(t)}));var It={oauth:["qq"],share:["qq"],payment:["qqpay"],push:["qq"]};function Lt(t){var e=t.service,n=t.success,r=t.fail,o=t.complete,i=!1;It[e]?(i={errMsg:"getProvider:ok",service:e,provider:It[e]},S(n)&&n(i)):(i={errMsg:"getProvider:fail:服务["+e+"]不存在"},S(r)&&r(i)),S(o)&&o(i)}var Nt=Object.freeze({__proto__:null,getProvider:Lt}),Bt=function(){var t;return function(){return t||(t=new r.default),t}}();function Rt(t,e,n){return t[e].apply(t,n)}function Vt(){return Rt(Bt(),"$on",Array.prototype.slice.call(arguments))}function Ht(){return Rt(Bt(),"$off",Array.prototype.slice.call(arguments))}function Ft(){return Rt(Bt(),"$once",Array.prototype.slice.call(arguments))}function zt(){return Rt(Bt(),"$emit",Array.prototype.slice.call(arguments))}var qt=Object.freeze({__proto__:null,$on:Vt,$off:Ht,$once:Ft,$emit:zt});function Gt(){var t={},e=wx.getSystemInfoSync(),n=e.windowWidth,r=e.windowHeight,o=n<r?"portrait":"landscape";return t.observe=function(t,e){var i=!0;for(var a in t){var s="orientation"===a?t[a]:Number(t[a]);if(""!==t[a]){if("width"===a){if(s!==n)return i=!1,e(i),i;i=!0}if("minWidth"===a){if(!(n>=s))return i=!1,e(i),i;i=!0}if("maxWidth"===a){if(!(n<=s))return i=!1,e(i),i;i=!0}if("height"===a){if(s!==r)return i=!1,e(i),i;i=!0}if("minHeight"===a){if(!(r>=s))return i=!1,e(i),i;i=!0}if("maxHeight"===a){if(!(r<=s))return i=!1,e(i),i;i=!0}if("orientation"===a){if(t[a]!==o)return i=!1,e(i),i;i=!0}}}return e(i),i},t.disconnect=function(){},t}var Wt=Object.freeze({__proto__:null,createMediaQueryObserver:Gt}),Jt=Page,Kt=Component,Yt=/:/g,Qt=k((function(t){return D(t.replace(Yt,"-"))}));function Xt(t){var e=t.triggerEvent;t.triggerEvent=function(n){for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return e.apply(t,[Qt(n)].concat(o))}}function Zt(t,e){var n=e[t];e[t]=n?function(){Xt(this);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return n.apply(this,e)}:function(){Xt(this)}}Page=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Zt("onLoad",t),Jt(t)},Component=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Zt("created",t),Kt(t)};var te=["onPullDownRefresh","onReachBottom","onAddToFavorites","onShareTimeline","onShareAppMessage","onPageScroll","onResize","onTabItemTap"];function ee(t,e){var n=t.$mp[t.mpType];e.forEach((function(e){A(n,e)&&(t[e]=n[e])}))}function ne(t,e){if(!e)return!0;if(r.default.options&&Array.isArray(r.default.options[t]))return!0;if(e=e.default||e,S(e))return!!S(e.extendOptions[t])||!!(e.super&&e.super.options&&Array.isArray(e.super.options[t]));if(S(e[t]))return!0;var n=e.mixins;return Array.isArray(n)?!!n.find((function(e){return ne(t,e)})):void 0}function re(t,e,n){e.forEach((function(e){ne(e,n)&&(t[e]=function(t){return this.$vm&&this.$vm.__call_hook(e,t)})}))}function oe(t,e){var n;return e=e.default||e,n=S(e)?e:t.extend(e),e=n.options,[n,e]}function ie(t,e){if(Array.isArray(e)&&e.length){var n=Object.create(null);e.forEach((function(t){n[t]=!0})),t.$scopedSlots=t.$slots=n}}function ae(t,e){t=(t||"").split(",");var n=t.length;1===n?e._$vueId=t[0]:2===n&&(e._$vueId=t[0],e._$vuePid=t[1])}function se(t,e){var n=t.data||{},r=t.methods||{};if("function"===typeof n)try{n=n.call(e)}catch(o){Object({VUE_APP_NAME:"豆荚游戏财神版",VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG&&console.warn("根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。",n)}else try{n=JSON.parse(JSON.stringify(n))}catch(o){}return j(n)||(n={}),Object.keys(r).forEach((function(t){-1!==e.__lifecycle_hooks__.indexOf(t)||A(n,t)||(n[t]=r[t])})),n}var ce=[String,Number,Boolean,Object,Array,null];function ue(t){return function(e,n){this.$vm&&(this.$vm[t]=e)}}function le(t,e){var n=t.behaviors,r=t.extends,o=t.mixins,i=t.props;i||(t.props=i=[]);var a=[];return Array.isArray(n)&&n.forEach((function(t){a.push(t.replace("uni://","wx".concat("://"))),"uni://form-field"===t&&(Array.isArray(i)?(i.push("name"),i.push("value")):(i.name={type:String,default:""},i.value={type:[String,Number,Boolean,Array,Object,Date],default:""}))})),j(r)&&r.props&&a.push(e({properties:pe(r.props,!0)})),Array.isArray(o)&&o.forEach((function(t){j(t)&&t.props&&a.push(e({properties:pe(t.props,!0)}))})),a}function fe(t,e,n,r){return Array.isArray(e)&&1===e.length?e[0]:e}function pe(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n={};return e||(n.vueId={type:String,value:""},n.generic={type:Object,value:null},n.vueSlots={type:null,value:[],observer:function(t,e){var n=Object.create(null);t.forEach((function(t){n[t]=!0})),this.setData({$slots:n})}}),Array.isArray(t)?t.forEach((function(t){n[t]={type:null,observer:ue(t)}})):j(t)&&Object.keys(t).forEach((function(e){var r=t[e];if(j(r)){var o=r.default;S(o)&&(o=o()),r.type=fe(e,r.type),n[e]={type:-1!==ce.indexOf(r.type)?r.type:null,value:o,observer:ue(e)}}else{var i=fe(e,r);n[e]={type:-1!==ce.indexOf(i)?i:null,observer:ue(e)}}})),n}function he(t){try{t.mp=JSON.parse(JSON.stringify(t))}catch(e){}return t.stopPropagation=x,t.preventDefault=x,t.target=t.target||{},A(t,"detail")||(t.detail={}),A(t,"markerId")&&(t.detail="object"===typeof t.detail?t.detail:{},t.detail.markerId=t.markerId),j(t.detail)&&(t.target=Object.assign({},t.target,t.detail)),t}function de(t,e){var n=t;return e.forEach((function(e){var r=e[0],o=e[2];if(r||"undefined"!==typeof o){var i,a=e[1],s=e[3];Number.isInteger(r)?i=r:r?"string"===typeof r&&r&&(i=0===r.indexOf("#s#")?r.substr(3):t.__get_value(r,n)):i=n,Number.isInteger(i)?n=o:a?Array.isArray(i)?n=i.find((function(e){return t.__get_value(a,e)===o})):j(i)?n=Object.keys(i).find((function(e){return t.__get_value(a,i[e])===o})):console.error("v-for 暂不支持循环数据：",i):n=i[o],s&&(n=t.__get_value(s,n))}})),n}function ve(t,e,n){var r={};return Array.isArray(e)&&e.length&&e.forEach((function(e,o){"string"===typeof e?e?"$event"===e?r["$"+o]=n:"arguments"===e?n.detail&&n.detail.__args__?r["$"+o]=n.detail.__args__:r["$"+o]=[n]:0===e.indexOf("$event.")?r["$"+o]=t.__get_value(e.replace("$event.",""),n):r["$"+o]=t.__get_value(e):r["$"+o]=t:r["$"+o]=de(t,e)})),r}function ye(t){for(var e={},n=1;n<t.length;n++){var r=t[n];e[r[0]]=r[1]}return e}function ge(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,a=!1;if(o&&(a=e.currentTarget&&e.currentTarget.dataset&&"wx"===e.currentTarget.dataset.comType,!n.length))return a?[e]:e.detail.__args__||e.detail;var s=ve(t,r,e),c=[];return n.forEach((function(t){"$event"===t?"__set_model"!==i||o?o&&!a?c.push(e.detail.__args__[0]):c.push(e):c.push(e.target.value):Array.isArray(t)&&"o"===t[0]?c.push(ye(t)):"string"===typeof t&&A(s,t)?c.push(s[t]):c.push(t)})),c}var me="~",_e="^";function be(t,e){return t===e||"regionchange"===e&&("begin"===t||"end"===t)}function we(t){var e=t.$parent;while(e&&e.$parent&&(e.$options.generic||e.$parent.$options.generic||e.$scope._$vuePid))e=e.$parent;return e&&e.$parent}function Oe(t){var e=this;t=he(t);var n=(t.currentTarget||t.target).dataset;if(!n)return console.warn("事件信息不存在");var r=n.eventOpts||n["event-opts"];if(!r)return console.warn("事件信息不存在");var o=t.type,i=[];return r.forEach((function(n){var r=n[0],a=n[1],s=r.charAt(0)===_e;r=s?r.slice(1):r;var c=r.charAt(0)===me;r=c?r.slice(1):r,a&&be(o,r)&&a.forEach((function(n){var r=n[0];if(r){var o=e.$vm;if(o.$options.generic&&(o=we(o)||o),"$emit"===r)return void o.$emit.apply(o,ge(e.$vm,t,n[1],n[2],s,r));var a=o[r];if(!S(a))throw new Error(" _vm.".concat(r," is not a function"));if(c){if(a.once)return;a.once=!0}var u=ge(e.$vm,t,n[1],n[2],s,r);i.push(a.apply(o,(Array.isArray(u)?u:[]).concat([,,,,,,,,,,t])))}}))})),"input"===o&&1===i.length&&"undefined"!==typeof i[0]?i[0]:void 0}var Se=["onShow","onHide","onError","onPageNotFound","onThemeChange","onUnhandledRejection"];function $e(t,e){var n=e.mocks,o=e.initRefs;t.$options.store&&(r.default.prototype.$store=t.$options.store),r.default.prototype.mpHost="mp-qq",r.default.mixin({beforeCreate:function(){this.$options.mpType&&(this.mpType=this.$options.mpType,this.$mp=f({data:{}},this.mpType,this.$options.mpInstance),this.$scope=this.$options.mpInstance,delete this.$options.mpType,delete this.$options.mpInstance,"app"!==this.mpType&&(o(this),ee(this,n)))}});var i={onLaunch:function(e){this.$vm||(wx.canIUse("nextTick")||console.error("当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上"),this.$vm=t,this.$vm.$mp={app:this},this.$vm.$scope=this,this.$vm.globalData=this.globalData,this.$vm._isMounted=!0,this.$vm.__call_hook("mounted",e),this.$vm.__call_hook("onLaunch",e))}};i.globalData=t.$options.globalData||{};var a=t.$options.methods;return a&&Object.keys(a).forEach((function(t){i[t]=a[t]})),re(i,Se),i}var je=["__route__","__wxExparserNodeId__","__wxWebviewId__"];function Ae(t,e){for(var n,r=t.$children,o=r.length-1;o>=0;o--){var i=r[o];if(i.$scope._$vueId===e)return i}for(var a=r.length-1;a>=0;a--)if(n=Ae(r[a],e),n)return n}function xe(t){return Behavior(t)}function ke(){return!!this.route}function Pe(t){this.triggerEvent("__l",t)}function De(t,e,n){var r=t.selectAllComponents(e);r.forEach((function(t){var e=t.dataset.ref;n[e]=t.$vm||t}))}function Ee(t){var e=t.$scope;Object.defineProperty(t,"$refs",{get:function(){var t={};De(e,".vue-ref",t);var n=e.selectAllComponents(".vue-ref-in-for");return n.forEach((function(e){var n=e.dataset.ref;t[n]||(t[n]=[]),t[n].push(e.$vm||e)})),t}})}function Ce(t){var e,n=t.detail||t.value,r=n.vuePid,o=n.vueOptions;r&&(e=Ae(this.$vm,r)),e||(e=this.$vm),o.parent=e}function Ue(t){return $e(t,{mocks:je,initRefs:Ee})}function Te(t){return Ue(t)}function Me(t){r.default.prototype.getOpenerEventChannel=function(){return this.__eventChannel__||(this.__eventChannel__=new vt),this.__eventChannel__};var e=r.default.prototype.__call_hook;return r.default.prototype.__call_hook=function(t,n){return"onLoad"===t&&n&&n.__id__&&(this.__eventChannel__=bt(n.__id__),delete n.__id__),e.call(this,t,n)},App(Te(t)),t}var Ie=/[!'()*]/g,Le=function(t){return"%"+t.charCodeAt(0).toString(16)},Ne=/%2C/g,Be=function(t){return encodeURIComponent(t).replace(Ie,Le).replace(Ne,",")};function Re(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Be,n=t?Object.keys(t).map((function(n){var r=t[n];if(void 0===r)return"";if(null===r)return e(n);if(Array.isArray(r)){var o=[];return r.forEach((function(t){void 0!==t&&(null===t?o.push(e(n)):o.push(e(n)+"="+e(t)))})),o.join("&")}return e(n)+"="+e(r)})).filter((function(t){return t.length>0})).join("&"):null;return n?"?".concat(n):""}function Ve(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.isPage,o=e.initRelation,i=oe(r.default,t),c=s(i,2),u=c[0],l=c[1],f=a({multipleSlots:!0,addGlobalClass:!0},l.options||{});l["mp-weixin"]&&l["mp-weixin"].options&&Object.assign(f,l["mp-weixin"].options);var p={options:f,data:se(l,r.default.prototype),behaviors:le(l,xe),properties:pe(l.props,!1,l.__file),lifetimes:{attached:function(){var t=this.properties,e={mpType:n.call(this)?"page":"component",mpInstance:this,propsData:t};ae(t.vueId,this),o.call(this,{vuePid:this._$vuePid,vueOptions:e}),this.$vm=new u(e),ie(this.$vm,t.vueSlots),this.$vm.$mount()},ready:function(){this.$vm&&(this.$vm._isMounted=!0,this.$vm.__call_hook("mounted"),this.$vm.__call_hook("onReady"))},detached:function(){this.$vm&&this.$vm.$destroy()}},pageLifetimes:{show:function(t){this.$vm&&this.$vm.__call_hook("onPageShow",t)},hide:function(){this.$vm&&this.$vm.__call_hook("onPageHide")},resize:function(t){this.$vm&&this.$vm.__call_hook("onPageResize",t)}},methods:{__l:Ce,__e:Oe}};return l.externalClasses&&(p.externalClasses=l.externalClasses),Array.isArray(l.wxsCallMethods)&&l.wxsCallMethods.forEach((function(t){p.methods[t]=function(e){return this.$vm[t](e)}})),n?p:[p,u]}function He(t){return Ve(t,{isPage:ke,initRelation:Pe})}function Fe(t){return He(t)}var ze=["onShow","onHide","onUnload"];function qe(t,e){e.isPage,e.initRelation;var n=Fe(t);return re(n.methods,ze,t),n.methods.onLoad=function(t){this.options=t;var e=Object.assign({},t);delete e.__id__,this.$page={fullPath:"/"+(this.route||this.is)+Re(e)},this.$vm.$mp.query=t,this.$vm.__call_hook("onLoad",t)},n}function Ge(t){return qe(t,{isPage:ke,initRelation:Pe})}function We(t){return Ge(t)}function Je(t){return Component(We(t))}function Ke(t){return Component(Fe(t))}ze.push.apply(ze,te),At.forEach((function(t){jt[t]=!1})),xt.forEach((function(t){var e=jt[t]&&jt[t].name?jt[t].name:t;wx.canIUse(e)||(jt[t]=!1)}));var Ye={};"undefined"!==typeof Proxy?Ye=new Proxy({},{get:function(t,e){return A(t,e)?t[e]:dt[e]?dt[e]:Wt[e]?it(e,Wt[e]):Nt[e]?it(e,Nt[e]):Ut[e]?it(e,Ut[e]):qt[e]?qt[e]:A(wx,e)||A(jt,e)?it(e,Ct(e,wx[e])):void 0},set:function(t,e,n){return t[e]=n,!0}}):(Object.keys(dt).forEach((function(t){Ye[t]=dt[t]})),Object.keys(Ut).forEach((function(t){Ye[t]=it(t,Ut[t])})),Object.keys(Nt).forEach((function(t){Ye[t]=it(t,Ut[t])})),Object.keys(qt).forEach((function(t){Ye[t]=qt[t]})),Object.keys(Wt).forEach((function(t){Ye[t]=it(t,Wt[t])})),Object.keys(wx).forEach((function(t){(A(wx,t)||A(jt,t))&&(Ye[t]=it(t,Ct(t,wx[t])))}))),wx.createApp=Me,wx.createPage=Je,wx.createComponent=Ke;var Qe=Ye,Xe=Qe;e.default=Xe},10:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */function(t,e,n){"use strict";function r(t,e,n,r,o,i,a,s,c,u){var l,f="function"===typeof t?t.options:t;if(c){f.components||(f.components={});var p=Object.prototype.hasOwnProperty;for(var h in c)p.call(c,h)&&!p.call(f.components,h)&&(f.components[h]=c[h])}if(u&&((u.beforeCreate||(u.beforeCreate=[])).unshift((function(){this[u.__module]=this})),(f.mixins||(f.mixins=[])).push(u)),e&&(f.render=e,f.staticRenderFns=n,f._compiled=!0),r&&(f.functional=!0),i&&(f._scopeId="data-v-"+i),a?(l=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||"undefined"===typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},f._ssrRegister=l):o&&(l=s?function(){o.call(this,this.$root.$options.shadowRoot)}:o),l)if(f.functional){f._injectStyles=l;var d=f.render;f.render=function(t,e){return l.call(e),d(t,e)}}else{var v=f.beforeCreate;f.beforeCreate=v?[].concat(v,l):[l]}return{exports:t,options:f}}n.r(e),n.d(e,"default",(function(){return r}))},11:
/*!******************************************!*\
  !*** D:/daima/2020/天天领红包/store/index.js ***!
  \******************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=i(n(/*! vue */2)),o=i(n(/*! vuex */12));function i(t){return t&&t.__esModule?t:{default:t}}r.default.use(o.default);var a=new o.default.Store({state:{loginStatus:!1,token:"",avatarUrl:"",userName:"",uid:"",user:null,dialogStatus:!1,loginDialogStatus:!1,inviteCode:""},getters:{token:function(e){var n=e.token;return n||(n=t.getStorageSync("token")||null),n},getInfo:function(e){var n=e.user;return n||(n=t.getStorageSync("userInfo")||null),n},getInviteCode:function(e){var n=e.inviteCode;return n||(n=t.getStorageSync("inviteCode")||null),n},getLoginStatus:function(e){var n=e.loginStatus;return n||(n=t.getStorageSync("loginStatus")||!1),n},getDialogStatus:function(e){var n=e.dialogStatus;return n||(n=t.getStorageSync("dialogStatus")||!1),n},getLoginDialogStatus:function(t){var e=t.loginDialogStatus;return e||(e=!1),e}},mutations:{login:function(e,n){e.loginStatus=!0,e.user=n,e.token=n.token,t.setStorageSync("userInfo",n),t.setStorageSync("loginStatus",!0),t.setStorageSync("token",n.token)},logout:function(e){e.loginStatus=!1,e.user=null,e.token="",e.inviteCode="",t.clearStorageSync()},setInviteCode:function(e,n){e.inviteCode=n,t.setStorageSync("inviteCode",n)},setDialogStatus:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e.dialogStatus=n,t.setStorageSync("dialogStatus",n)},setLoginDialogStatus:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t.loginDialogStatus=e}}}),s=a;e.default=s}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},118:
/*!*******************************************************************!*\
  !*** D:/daima/2020/天天领红包/components/mescroll-uni/mescroll-uni.js ***!
  \*******************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){function n(t,e){var n=this;n.version="1.3.3",n.options=t||{},n.isScrollBody=e||!1,n.isDownScrolling=!1,n.isUpScrolling=!1;var r=n.options.down&&n.options.down.callback;n.initDownScroll(),n.initUpScroll(),setTimeout((function(){(n.optDown.use||n.optDown.native)&&n.optDown.auto&&r&&(n.optDown.autoShowLoading?n.triggerDownScroll():n.optDown.callback&&n.optDown.callback(n)),n.isUpAutoLoad||setTimeout((function(){n.optUp.use&&n.optUp.auto&&!n.isUpAutoLoad&&n.triggerUpScroll()}),100)}),30)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=n,n.prototype.extendDownScroll=function(t){n.extend(t,{use:!0,auto:!0,native:!1,autoShowLoading:!1,isLock:!1,offset:80,startTop:100,inOffsetRate:1,outOffsetRate:.2,bottomOffset:20,minAngle:45,textInOffset:"下拉刷新",textOutOffset:"释放更新",textLoading:"加载中 ...",textSuccess:"加载成功",textErr:"加载失败",beforeEndDelay:100,bgColor:"transparent",textColor:"gray",inited:null,inOffset:null,outOffset:null,onMoving:null,beforeLoading:null,showLoading:null,afterLoading:null,beforeEndDownScroll:null,endDownScroll:null,afterEndDownScroll:null,callback:function(t){t.resetUpScroll()}})},n.prototype.extendUpScroll=function(t){n.extend(t,{use:!0,auto:!0,isLock:!1,isBoth:!0,callback:null,page:{num:0,size:10,time:null},noMoreSize:5,offset:150,textLoading:"加载中 ...",textNoMore:"-- END --",bgColor:"transparent",textColor:"gray",inited:null,showLoading:null,showNoMore:null,hideUpScroll:null,errDistance:60,toTop:{src:null,offset:1e3,duration:300,btnClick:null,onShow:null,zIndex:9990,left:null,right:20,bottom:120,safearea:!1,width:72,radius:"50%"},empty:{use:!0,icon:null,tip:"~ 暂无相关数据 ~",btnText:"",btnClick:null,onShow:null,fixed:!1,top:"100rpx",zIndex:99},onScroll:!1})},n.extend=function(t,e){if(!t)return e;for(var r in e)if(null==t[r]){var o=e[r];t[r]=null!=o&&"object"===typeof o?n.extend({},o):o}else"object"===typeof t[r]&&n.extend(t[r],e[r]);return t},n.prototype.hasColor=function(t){if(!t)return!1;var e=t.toLowerCase();return"#fff"!=e&&"#ffffff"!=e&&"transparent"!=e&&"white"!=e},n.prototype.initDownScroll=function(){var t=this;t.optDown=t.options.down||{},!t.optDown.textColor&&t.hasColor(t.optDown.bgColor)&&(t.optDown.textColor="#fff"),t.extendDownScroll(t.optDown),t.isScrollBody&&t.optDown.native?t.optDown.use=!1:t.optDown.native=!1,t.downHight=0,t.optDown.use&&t.optDown.inited&&setTimeout((function(){t.optDown.inited(t)}),0)},n.prototype.touchstartEvent=function(t){this.optDown.use&&(this.startPoint=this.getPoint(t),this.startTop=this.getScrollTop(),this.startAngle=0,this.lastPoint=this.startPoint,this.maxTouchmoveY=this.getBodyHeight()-this.optDown.bottomOffset,this.inTouchend=!1)},n.prototype.touchmoveEvent=function(t){if(this.optDown.use){var e=this,n=e.getScrollTop(),r=e.getPoint(t),o=r.y-e.startPoint.y;if(o>0&&(e.isScrollBody&&n<=0||!e.isScrollBody&&(n<=0||n<=e.optDown.startTop&&n===e.startTop))&&!e.inTouchend&&!e.isDownScrolling&&!e.optDown.isLock&&(!e.isUpScrolling||e.isUpScrolling&&e.optUp.isBoth)){if(e.startAngle||(e.startAngle=e.getAngle(e.lastPoint,r)),e.startAngle<e.optDown.minAngle)return;if(e.maxTouchmoveY>0&&r.y>=e.maxTouchmoveY)return e.inTouchend=!0,void e.touchendEvent();e.preventDefault(t);var i=r.y-e.lastPoint.y;e.downHight<e.optDown.offset?(1!==e.movetype&&(e.movetype=1,e.isDownEndSuccess=null,e.optDown.inOffset&&e.optDown.inOffset(e),e.isMoveDown=!0),e.downHight+=i*e.optDown.inOffsetRate):(2!==e.movetype&&(e.movetype=2,e.optDown.outOffset&&e.optDown.outOffset(e),e.isMoveDown=!0),e.downHight+=i>0?i*e.optDown.outOffsetRate:i),e.downHight=Math.round(e.downHight);var a=e.downHight/e.optDown.offset;e.optDown.onMoving&&e.optDown.onMoving(e,a,e.downHight)}e.lastPoint=r}},n.prototype.touchendEvent=function(t){if(this.optDown.use)if(this.isMoveDown)this.downHight>=this.optDown.offset?this.triggerDownScroll():(this.downHight=0,this.endDownScrollCall(this)),this.movetype=0,this.isMoveDown=!1;else if(!this.isScrollBody&&this.getScrollTop()===this.startTop){var e=this.getPoint(t).y-this.startPoint.y<0;if(e){var n=this.getAngle(this.getPoint(t),this.startPoint);n>80&&this.triggerUpScroll(!0)}}},n.prototype.getPoint=function(t){return t?t.touches&&t.touches[0]?{x:t.touches[0].pageX,y:t.touches[0].pageY}:t.changedTouches&&t.changedTouches[0]?{x:t.changedTouches[0].pageX,y:t.changedTouches[0].pageY}:{x:t.clientX,y:t.clientY}:{x:0,y:0}},n.prototype.getAngle=function(t,e){var n=Math.abs(t.x-e.x),r=Math.abs(t.y-e.y),o=Math.sqrt(n*n+r*r),i=0;return 0!==o&&(i=Math.asin(r/o)/Math.PI*180),i},n.prototype.triggerDownScroll=function(){this.optDown.beforeLoading&&this.optDown.beforeLoading(this)||(this.showDownScroll(),!this.optDown.native&&this.optDown.callback&&this.optDown.callback(this))},n.prototype.showDownScroll=function(){this.isDownScrolling=!0,this.optDown.native?(t.startPullDownRefresh(),this.showDownLoadingCall(0)):(this.downHight=this.optDown.offset,this.showDownLoadingCall(this.downHight))},n.prototype.showDownLoadingCall=function(t){this.optDown.showLoading&&this.optDown.showLoading(this,t),this.optDown.afterLoading&&this.optDown.afterLoading(this,t)},n.prototype.onPullDownRefresh=function(){this.isDownScrolling=!0,this.showDownLoadingCall(0),this.optDown.callback&&this.optDown.callback(this)},n.prototype.endDownScroll=function(){if(this.optDown.native)return this.isDownScrolling=!1,this.endDownScrollCall(this),void t.stopPullDownRefresh();var e=this,n=function(){e.downHight=0,e.isDownScrolling=!1,e.endDownScrollCall(e),e.isScrollBody||(e.setScrollHeight(0),e.scrollTo(0,0))},r=0;e.optDown.beforeEndDownScroll&&(r=e.optDown.beforeEndDownScroll(e),null==e.isDownEndSuccess&&(r=0)),"number"===typeof r&&r>0?setTimeout(n,r):n()},n.prototype.endDownScrollCall=function(){this.optDown.endDownScroll&&this.optDown.endDownScroll(this),this.optDown.afterEndDownScroll&&this.optDown.afterEndDownScroll(this)},n.prototype.lockDownScroll=function(t){null==t&&(t=!0),this.optDown.isLock=t},n.prototype.lockUpScroll=function(t){null==t&&(t=!0),this.optUp.isLock=t},n.prototype.initUpScroll=function(){var t=this;t.optUp=t.options.up||{use:!1},!t.optUp.textColor&&t.hasColor(t.optUp.bgColor)&&(t.optUp.textColor="#fff"),t.extendUpScroll(t.optUp),!1!==t.optUp.use&&(t.optUp.hasNext=!0,t.startNum=t.optUp.page.num+1,t.optUp.inited&&setTimeout((function(){t.optUp.inited(t)}),0))},n.prototype.onReachBottom=function(){this.isScrollBody&&!this.isUpScrolling&&!this.optUp.isLock&&this.optUp.hasNext&&this.triggerUpScroll()},n.prototype.onPageScroll=function(t){this.isScrollBody&&(this.setScrollTop(t.scrollTop),t.scrollTop>=this.optUp.toTop.offset?this.showTopBtn():this.hideTopBtn())},n.prototype.scroll=function(t,e){this.setScrollTop(t.scrollTop),this.setScrollHeight(t.scrollHeight),null==this.preScrollY&&(this.preScrollY=0),this.isScrollUp=t.scrollTop-this.preScrollY>0,this.preScrollY=t.scrollTop,this.isScrollUp&&this.triggerUpScroll(!0),t.scrollTop>=this.optUp.toTop.offset?this.showTopBtn():this.hideTopBtn(),this.optUp.onScroll&&e&&e()},n.prototype.triggerUpScroll=function(t){if(!this.isUpScrolling&&this.optUp.use&&this.optUp.callback){if(!0===t){var e=!1;if(!this.optUp.hasNext||this.optUp.isLock||this.isDownScrolling||this.getScrollBottom()<=this.optUp.offset&&(e=!0),!1===e)return}this.showUpScroll(),this.optUp.page.num++,this.isUpAutoLoad=!0,this.num=this.optUp.page.num,this.size=this.optUp.page.size,this.time=this.optUp.page.time,this.optUp.callback(this)}},n.prototype.showUpScroll=function(){this.isUpScrolling=!0,this.optUp.showLoading&&this.optUp.showLoading(this)},n.prototype.showNoMore=function(){this.optUp.hasNext=!1,this.optUp.showNoMore&&this.optUp.showNoMore(this)},n.prototype.hideUpScroll=function(){this.optUp.hideUpScroll&&this.optUp.hideUpScroll(this)},n.prototype.endUpScroll=function(t){null!=t&&(t?this.showNoMore():this.hideUpScroll()),this.isUpScrolling=!1},n.prototype.resetUpScroll=function(t){if(this.optUp&&this.optUp.use){var e=this.optUp.page;this.prePageNum=e.num,this.prePageTime=e.time,e.num=this.startNum,e.time=null,this.isDownScrolling||!1===t||(null==t?(this.removeEmpty(),this.showUpScroll()):this.showDownScroll()),this.isUpAutoLoad=!0,this.num=e.num,this.size=e.size,this.time=e.time,this.optUp.callback&&this.optUp.callback(this)}},n.prototype.setPageNum=function(t){this.optUp.page.num=t-1},n.prototype.setPageSize=function(t){this.optUp.page.size=t},n.prototype.endByPage=function(t,e,n){var r;this.optUp.use&&null!=e&&(r=this.optUp.page.num<e),this.endSuccess(t,r,n)},n.prototype.endBySize=function(t,e,n){var r;if(this.optUp.use&&null!=e){var o=(this.optUp.page.num-1)*this.optUp.page.size+t;r=o<e}this.endSuccess(t,r,n)},n.prototype.endSuccess=function(t,e,n){var r=this;if(r.isDownScrolling&&(r.isDownEndSuccess=!0,r.endDownScroll()),r.optUp.use){var o;if(null!=t){var i=r.optUp.page.num,a=r.optUp.page.size;if(1===i&&n&&(r.optUp.page.time=n),t<a||!1===e)if(r.optUp.hasNext=!1,0===t&&1===i)o=!1,r.showEmpty();else{var s=(i-1)*a+t;o=!(s<r.optUp.noMoreSize),r.removeEmpty()}else o=!1,r.optUp.hasNext=!0,r.removeEmpty()}r.endUpScroll(o)}},n.prototype.endErr=function(t){if(this.isDownScrolling){this.isDownEndSuccess=!1;var e=this.optUp.page;e&&this.prePageNum&&(e.num=this.prePageNum,e.time=this.prePageTime),this.endDownScroll()}this.isUpScrolling&&(this.optUp.page.num--,this.endUpScroll(!1),this.isScrollBody&&0!==t&&(t||(t=this.optUp.errDistance),this.scrollTo(this.getScrollTop()-t,0)))},n.prototype.showEmpty=function(){this.optUp.empty.use&&this.optUp.empty.onShow&&this.optUp.empty.onShow(!0)},n.prototype.removeEmpty=function(){this.optUp.empty.use&&this.optUp.empty.onShow&&this.optUp.empty.onShow(!1)},n.prototype.showTopBtn=function(){this.topBtnShow||(this.topBtnShow=!0,this.optUp.toTop.onShow&&this.optUp.toTop.onShow(!0))},n.prototype.hideTopBtn=function(){this.topBtnShow&&(this.topBtnShow=!1,this.optUp.toTop.onShow&&this.optUp.toTop.onShow(!1))},n.prototype.getScrollTop=function(){return this.scrollTop||0},n.prototype.setScrollTop=function(t){this.scrollTop=t},n.prototype.scrollTo=function(t,e){this.myScrollTo&&this.myScrollTo(t,e)},n.prototype.resetScrollTo=function(t){this.myScrollTo=t},n.prototype.getScrollBottom=function(){return this.getScrollHeight()-this.getClientHeight()-this.getScrollTop()},n.prototype.getStep=function(t,e,n,r,o){var i=e-t;if(0!==r&&0!==i){r=r||300,o=o||30;var a=r/o,s=i/a,c=0,u=setInterval((function(){c<a-1?(t+=s,n&&n(t,u),c++):(n&&n(e,u),clearInterval(u))}),o)}else n&&n(e)},n.prototype.getClientHeight=function(t){var e=this.clientHeight||0;return 0===e&&!0!==t&&(e=this.getBodyHeight()),e},n.prototype.setClientHeight=function(t){this.clientHeight=t},n.prototype.getScrollHeight=function(){return this.scrollHeight||0},n.prototype.setScrollHeight=function(t){this.scrollHeight=t},n.prototype.getBodyHeight=function(){return this.bodyHeight||0},n.prototype.setBodyHeight=function(t){this.bodyHeight=t},n.prototype.preventDefault=function(t){t&&t.cancelable&&!t.defaultPrevented&&t.preventDefault()}}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},119:
/*!**************************************************************************!*\
  !*** D:/daima/2020/天天领红包/components/mescroll-uni/mescroll-uni-option.js ***!
  \**************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r={down:{textInOffset:"下拉刷新",textOutOffset:"释放更新",textLoading:"加载中 ...",textSuccess:"加载成功",textErr:"加载失败",beforeEndDelay:100,offset:80,native:!1},up:{textLoading:"加载中 ...",textNoMore:"-- END --",offset:150,toTop:{src:"https://www.mescroll.com/img/mescroll-totop.png",offset:1e3,right:20,bottom:120,width:72},empty:{use:!0,icon:"https://www.mescroll.com/img/mescroll-empty.png",tip:"~ 空空如也 ~"}}},o=r;e.default=o},12:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, createNamespacedHelpers, install, mapActions, mapGetters, mapMutations, mapState */function(t,e,n){"use strict";n.r(e),function(t){
/*!
 * vuex v3.4.0
 * (c) 2020 Evan You
 * @license MIT
 */
function r(t){var e=Number(t.version.split(".")[0]);if(e>=2)t.mixin({beforeCreate:r});else{var n=t.prototype._init;t.prototype._init=function(t){void 0===t&&(t={}),t.init=t.init?[r].concat(t.init):r,n.call(this,t)}}function r(){var t=this.$options;t.store?this.$store="function"===typeof t.store?t.store():t.store:t.parent&&t.parent.$store&&(this.$store=t.parent.$store)}}n.d(e,"Store",(function(){return O})),n.d(e,"createNamespacedHelpers",(function(){return V})),n.d(e,"install",(function(){return I})),n.d(e,"mapActions",(function(){return R})),n.d(e,"mapGetters",(function(){return B})),n.d(e,"mapMutations",(function(){return N})),n.d(e,"mapState",(function(){return L}));var o="undefined"!==typeof window?window:"undefined"!==typeof t?t:{},i=o.__VUE_DEVTOOLS_GLOBAL_HOOK__;function a(t){i&&(t._devtoolHook=i,i.emit("vuex:init",t),i.on("vuex:travel-to-state",(function(e){t.replaceState(e)})),t.subscribe((function(t,e){i.emit("vuex:mutation",t,e)}),{prepend:!0}),t.subscribeAction((function(t,e){i.emit("vuex:action",t,e)}),{prepend:!0}))}function s(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}function c(t){return null!==t&&"object"===typeof t}function u(t){return t&&"function"===typeof t.then}function l(t,e){if(!t)throw new Error("[vuex] "+e)}function f(t,e){return function(){return t(e)}}var p=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"===typeof n?n():n)||{}},h={namespaced:{configurable:!0}};h.namespaced.get=function(){return!!this._rawModule.namespaced},p.prototype.addChild=function(t,e){this._children[t]=e},p.prototype.removeChild=function(t){delete this._children[t]},p.prototype.getChild=function(t){return this._children[t]},p.prototype.hasChild=function(t){return t in this._children},p.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},p.prototype.forEachChild=function(t){s(this._children,t)},p.prototype.forEachGetter=function(t){this._rawModule.getters&&s(this._rawModule.getters,t)},p.prototype.forEachAction=function(t){this._rawModule.actions&&s(this._rawModule.actions,t)},p.prototype.forEachMutation=function(t){this._rawModule.mutations&&s(this._rawModule.mutations,t)},Object.defineProperties(p.prototype,h);var d=function(t){this.register([],t,!1)};function v(t,e,n){if(b(t,n),e.update(n),n.modules)for(var r in n.modules){if(!e.getChild(r))return void console.warn("[vuex] trying to add a new module '"+r+"' on hot reloading, manual reload is needed");v(t.concat(r),e.getChild(r),n.modules[r])}}d.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},d.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return e=e.getChild(n),t+(e.namespaced?n+"/":"")}),"")},d.prototype.update=function(t){v([],this.root,t)},d.prototype.register=function(t,e,n){var r=this;void 0===n&&(n=!0),b(t,e);var o=new p(e,n);if(0===t.length)this.root=o;else{var i=this.get(t.slice(0,-1));i.addChild(t[t.length-1],o)}e.modules&&s(e.modules,(function(e,o){r.register(t.concat(o),e,n)}))},d.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];e.getChild(n).runtime&&e.removeChild(n)},d.prototype.isRegistered=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];return e.hasChild(n)};var y,g={assert:function(t){return"function"===typeof t},expected:"function"},m={assert:function(t){return"function"===typeof t||"object"===typeof t&&"function"===typeof t.handler},expected:'function or object with "handler" function'},_={getters:g,mutations:g,actions:m};function b(t,e){Object.keys(_).forEach((function(n){if(e[n]){var r=_[n];s(e[n],(function(e,o){l(r.assert(e),w(t,n,o,e,r.expected))}))}}))}function w(t,e,n,r,o){var i=e+" should be "+o+' but "'+e+"."+n+'"';return t.length>0&&(i+=' in module "'+t.join(".")+'"'),i+=" is "+JSON.stringify(r)+".",i}var O=function t(e){var n=this;void 0===e&&(e={}),!y&&"undefined"!==typeof window&&window.Vue&&I(window.Vue),l(y,"must call Vue.use(Vuex) before creating a store instance."),l("undefined"!==typeof Promise,"vuex requires a Promise polyfill in this browser."),l(this instanceof t,"store must be called with the new operator.");var r=e.plugins;void 0===r&&(r=[]);var o=e.strict;void 0===o&&(o=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new d(e),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new y,this._makeLocalGettersCache=Object.create(null);var i=this,s=this,c=s.dispatch,u=s.commit;this.dispatch=function(t,e){return c.call(i,t,e)},this.commit=function(t,e,n){return u.call(i,t,e,n)},this.strict=o;var f=this._modules.root.state;x(this,f,[],this._modules.root),A(this,f),r.forEach((function(t){return t(n)}));var p=void 0!==e.devtools?e.devtools:y.config.devtools;p&&a(this)},S={state:{configurable:!0}};function $(t,e,n){return e.indexOf(t)<0&&(n&&n.prepend?e.unshift(t):e.push(t)),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function j(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;x(t,n,[],t._modules.root,!0),A(t,n,e)}function A(t,e,n){var r=t._vm;t.getters={},t._makeLocalGettersCache=Object.create(null);var o=t._wrappedGetters,i={};s(o,(function(e,n){i[n]=f(e,t),Object.defineProperty(t.getters,n,{get:function(){return t._vm[n]},enumerable:!0})}));var a=y.config.silent;y.config.silent=!0,t._vm=new y({data:{$$state:e},computed:i}),y.config.silent=a,t.strict&&U(t),r&&(n&&t._withCommit((function(){r._data.$$state=null})),y.nextTick((function(){return r.$destroy()})))}function x(t,e,n,r,o){var i=!n.length,a=t._modules.getNamespace(n);if(r.namespaced&&(t._modulesNamespaceMap[a]&&console.error("[vuex] duplicate namespace "+a+" for the namespaced module "+n.join("/")),t._modulesNamespaceMap[a]=r),!i&&!o){var s=T(e,n.slice(0,-1)),c=n[n.length-1];t._withCommit((function(){c in s&&console.warn('[vuex] state field "'+c+'" was overridden by a module with the same name at "'+n.join(".")+'"'),y.set(s,c,r.state)}))}var u=r.context=k(t,a,n);r.forEachMutation((function(e,n){var r=a+n;D(t,r,e,u)})),r.forEachAction((function(e,n){var r=e.root?n:a+n,o=e.handler||e;E(t,r,o,u)})),r.forEachGetter((function(e,n){var r=a+n;C(t,r,e,u)})),r.forEachChild((function(r,i){x(t,e,n.concat(i),r,o)}))}function k(t,e,n){var r=""===e,o={dispatch:r?t.dispatch:function(n,r,o){var i=M(n,r,o),a=i.payload,s=i.options,c=i.type;if(s&&s.root||(c=e+c,t._actions[c]))return t.dispatch(c,a);console.error("[vuex] unknown local action type: "+i.type+", global type: "+c)},commit:r?t.commit:function(n,r,o){var i=M(n,r,o),a=i.payload,s=i.options,c=i.type;s&&s.root||(c=e+c,t._mutations[c])?t.commit(c,a,s):console.error("[vuex] unknown local mutation type: "+i.type+", global type: "+c)}};return Object.defineProperties(o,{getters:{get:r?function(){return t.getters}:function(){return P(t,e)}},state:{get:function(){return T(t.state,n)}}}),o}function P(t,e){if(!t._makeLocalGettersCache[e]){var n={},r=e.length;Object.keys(t.getters).forEach((function(o){if(o.slice(0,r)===e){var i=o.slice(r);Object.defineProperty(n,i,{get:function(){return t.getters[o]},enumerable:!0})}})),t._makeLocalGettersCache[e]=n}return t._makeLocalGettersCache[e]}function D(t,e,n,r){var o=t._mutations[e]||(t._mutations[e]=[]);o.push((function(e){n.call(t,r.state,e)}))}function E(t,e,n,r){var o=t._actions[e]||(t._actions[e]=[]);o.push((function(e){var o=n.call(t,{dispatch:r.dispatch,commit:r.commit,getters:r.getters,state:r.state,rootGetters:t.getters,rootState:t.state},e);return u(o)||(o=Promise.resolve(o)),t._devtoolHook?o.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):o}))}function C(t,e,n,r){t._wrappedGetters[e]?console.error("[vuex] duplicate getter key: "+e):t._wrappedGetters[e]=function(t){return n(r.state,r.getters,t.state,t.getters)}}function U(t){t._vm.$watch((function(){return this._data.$$state}),(function(){l(t._committing,"do not mutate vuex store state outside mutation handlers.")}),{deep:!0,sync:!0})}function T(t,e){return e.reduce((function(t,e){return t[e]}),t)}function M(t,e,n){return c(t)&&t.type&&(n=e,e=t,t=t.type),l("string"===typeof t,"expects string as the type, but found "+typeof t+"."),{type:t,payload:e,options:n}}function I(t){y&&t===y?console.error("[vuex] already installed. Vue.use(Vuex) should be called only once."):(y=t,r(y))}S.state.get=function(){return this._vm._data.$$state},S.state.set=function(t){l(!1,"use store.replaceState() to explicit replace store state.")},O.prototype.commit=function(t,e,n){var r=this,o=M(t,e,n),i=o.type,a=o.payload,s=o.options,c={type:i,payload:a},u=this._mutations[i];u?(this._withCommit((function(){u.forEach((function(t){t(a)}))})),this._subscribers.slice().forEach((function(t){return t(c,r.state)})),s&&s.silent&&console.warn("[vuex] mutation type: "+i+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+i)},O.prototype.dispatch=function(t,e){var n=this,r=M(t,e),o=r.type,i=r.payload,a={type:o,payload:i},s=this._actions[o];if(s){try{this._actionSubscribers.slice().filter((function(t){return t.before})).forEach((function(t){return t.before(a,n.state)}))}catch(u){console.warn("[vuex] error in before action subscribers: "),console.error(u)}var c=s.length>1?Promise.all(s.map((function(t){return t(i)}))):s[0](i);return new Promise((function(t,e){c.then((function(e){try{n._actionSubscribers.filter((function(t){return t.after})).forEach((function(t){return t.after(a,n.state)}))}catch(u){console.warn("[vuex] error in after action subscribers: "),console.error(u)}t(e)}),(function(t){try{n._actionSubscribers.filter((function(t){return t.error})).forEach((function(e){return e.error(a,n.state,t)}))}catch(u){console.warn("[vuex] error in error action subscribers: "),console.error(u)}e(t)}))}))}console.error("[vuex] unknown action type: "+o)},O.prototype.subscribe=function(t,e){return $(t,this._subscribers,e)},O.prototype.subscribeAction=function(t,e){var n="function"===typeof t?{before:t}:t;return $(n,this._actionSubscribers,e)},O.prototype.watch=function(t,e,n){var r=this;return l("function"===typeof t,"store.watch only accepts a function."),this._watcherVM.$watch((function(){return t(r.state,r.getters)}),e,n)},O.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._vm._data.$$state=t}))},O.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"===typeof t&&(t=[t]),l(Array.isArray(t),"module path must be a string or an Array."),l(t.length>0,"cannot register the root module by using registerModule."),this._modules.register(t,e),x(this,this.state,t,this._modules.get(t),n.preserveState),A(this,this.state)},O.prototype.unregisterModule=function(t){var e=this;"string"===typeof t&&(t=[t]),l(Array.isArray(t),"module path must be a string or an Array."),this._modules.unregister(t),this._withCommit((function(){var n=T(e.state,t.slice(0,-1));y.delete(n,t[t.length-1])})),j(this)},O.prototype.hasModule=function(t){return"string"===typeof t&&(t=[t]),l(Array.isArray(t),"module path must be a string or an Array."),this._modules.isRegistered(t)},O.prototype.hotUpdate=function(t){this._modules.update(t),j(this,!0)},O.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(O.prototype,S);var L=z((function(t,e){var n={};return F(e)||console.error("[vuex] mapState: mapper parameter must be either an Array or an Object"),H(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var r=q(this.$store,"mapState",t);if(!r)return;e=r.context.state,n=r.context.getters}return"function"===typeof o?o.call(this,e,n):e[o]},n[r].vuex=!0})),n})),N=z((function(t,e){var n={};return F(e)||console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object"),H(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.commit;if(t){var i=q(this.$store,"mapMutations",t);if(!i)return;r=i.context.commit}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),B=z((function(t,e){var n={};return F(e)||console.error("[vuex] mapGetters: mapper parameter must be either an Array or an Object"),H(e).forEach((function(e){var r=e.key,o=e.val;o=t+o,n[r]=function(){if(!t||q(this.$store,"mapGetters",t)){if(o in this.$store.getters)return this.$store.getters[o];console.error("[vuex] unknown getter: "+o)}},n[r].vuex=!0})),n})),R=z((function(t,e){var n={};return F(e)||console.error("[vuex] mapActions: mapper parameter must be either an Array or an Object"),H(e).forEach((function(e){var r=e.key,o=e.val;n[r]=function(){var e=[],n=arguments.length;while(n--)e[n]=arguments[n];var r=this.$store.dispatch;if(t){var i=q(this.$store,"mapActions",t);if(!i)return;r=i.context.dispatch}return"function"===typeof o?o.apply(this,[r].concat(e)):r.apply(this.$store,[o].concat(e))}})),n})),V=function(t){return{mapState:L.bind(null,t),mapGetters:B.bind(null,t),mapMutations:N.bind(null,t),mapActions:R.bind(null,t)}};function H(t){return F(t)?Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}})):[]}function F(t){return Array.isArray(t)||c(t)}function z(t){return function(e,n){return"string"!==typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function q(t,e,n){var r=t._modulesNamespaceMap[n];return r||console.error("[vuex] module namespace not found in "+e+"(): "+n),r}var G={Store:O,install:I,version:"3.4.0",mapState:L,mapMutations:N,mapGetters:B,mapActions:R,createNamespacedHelpers:V};e["default"]=G}.call(this,n(/*! ./../../webpack/buildin/global.js */3))},120:
/*!*****************************************************************!*\
  !*** D:/daima/2020/天天领红包/components/mescroll-uni/wxs/mixins.js ***!
  \*****************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r={data:function(){return{wxsProp:{optDown:{},scrollTop:0,bodyHeight:0,isDownScrolling:!1,isUpScrolling:!1,isScrollBody:!0,isUpBoth:!0,t:0},callProp:{callType:"",t:0},renderBiz:{propObserver:function(){}}}},methods:{wxsCall:function(t){"setWxsProp"===t.type?this.wxsProp={optDown:this.mescroll.optDown,scrollTop:this.mescroll.getScrollTop(),bodyHeight:this.mescroll.getBodyHeight(),isDownScrolling:this.mescroll.isDownScrolling,isUpScrolling:this.mescroll.isUpScrolling,isUpBoth:this.mescroll.optUp.isBoth,isScrollBody:this.mescroll.isScrollBody,t:Date.now()}:"setLoadType"===t.type?(this.downLoadType=t.downLoadType,this.$set(this.mescroll,"downLoadType",this.downLoadType),this.$set(this.mescroll,"isDownEndSuccess",null)):"triggerDownScroll"===t.type?this.mescroll.triggerDownScroll():"endDownScroll"===t.type?this.mescroll.endDownScroll():"triggerUpScroll"===t.type&&this.mescroll.triggerUpScroll(!0)}},mounted:function(){var t=this;this.mescroll.optDown.afterLoading=function(){t.callProp={callType:"showLoading",t:Date.now()}},this.mescroll.optDown.afterEndDownScroll=function(){t.callProp={callType:"endDownScroll",t:Date.now()};var e=300+(t.mescroll.optDown.beforeEndDelay||0);setTimeout((function(){4!==t.downLoadType&&0!==t.downLoadType||(t.callProp={callType:"clearTransform",t:Date.now()}),t.$set(t.mescroll,"downLoadType",t.downLoadType)}),e)},this.wxsCall({type:"setWxsProp"})}},o=r;e.default=o},13:
/*!*********************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/index.js ***!
  \*********************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(/*! ./core/Request */14));function o(t){return t&&t.__esModule?t:{default:t}}var i=r.default;e.default=i},14:
/*!****************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/core/Request.js ***!
  \****************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=c(n(/*! ./dispatchRequest */15)),o=c(n(/*! ./InterceptorManager */23)),i=c(n(/*! ./mergeConfig */24)),a=c(n(/*! ./defaults */25)),s=n(/*! ../utils */18);function c(t){return t&&t.__esModule?t:{default:t}}function u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?u(Object(n),!0).forEach((function(e){f(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function f(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function d(t,e,n){return e&&h(t.prototype,e),n&&h(t,n),t}var v=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p(this,t),(0,s.isPlainObject)(e)||(e={},console.warn("设置全局参数必须接收一个Object")),this.config=l(l({},a.default),e),this.interceptors={request:new o.default,response:new o.default}}return d(t,[{key:"setConfig",value:function(t){this.config=t(this.config)}},{key:"middleware",value:function(t){t=(0,i.default)(this.config,t);var e=[r.default,void 0],n=Promise.resolve(t);this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));while(e.length)n=n.then(e.shift(),e.shift());return n}},{key:"request",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.middleware(t)}},{key:"get",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.middleware(l({url:t,method:"GET"},e))}},{key:"post",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.middleware(l({url:t,data:e,method:"POST"},n))}},{key:"put",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.middleware(l({url:t,data:e,method:"PUT"},n))}},{key:"upload",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.url=t,e.method="UPLOAD",this.middleware(e)}},{key:"download",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.url=t,e.method="DOWNLOAD",this.middleware(e)}}]),t}();e.default=v},15:
/*!************************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/core/dispatchRequest.js ***!
  \************************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=o(n(/*! ../adapters/index */16));function o(t){return t&&t.__esModule?t:{default:t}}var i=function(t){return(0,r.default)(t)};e.default=i},16:
/*!******************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/adapters/index.js ***!
  \******************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=s(n(/*! ../helpers/buildURL */17)),o=s(n(/*! ../core/buildFullPath */19)),i=s(n(/*! ../core/settle */22)),a=n(/*! ../utils */18);function s(t){return t&&t.__esModule?t:{default:t}}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var f=function(t,e){var n={};return t.forEach((function(t){(0,a.isUndefined)(e[t])||(n[t]=e[t])})),n},p=function(e){return new Promise((function(n,a){var s,c=(0,r.default)((0,o.default)(e.baseURL,e.url),e.params),l={url:c,header:e.header,complete:function(t){e.fullPath=c,t.config=e;try{"string"===typeof t.data&&(t.data=JSON.parse(t.data))}catch(r){}(0,i.default)(n,a,t)}};if("UPLOAD"===e.method){delete l.header["content-type"],delete l.header["Content-Type"];var p={filePath:e.filePath,name:e.name},h=["formData"];s=t.uploadFile(u(u(u({},l),p),f(h,e)))}else if("DOWNLOAD"===e.method)s=t.downloadFile(l);else{var d=["data","method","dataType","responseType"];s=t.request(u(u({},l),f(d,e)))}e.getTask&&e.getTask(s,e)}))};e.default=p}).call(this,n(/*! ./node_modules/@dcloudio/uni-mp-qq/dist/index.js */1)["default"])},17:
/*!********************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/helpers/buildURL.js ***!
  \********************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=s;var r=i(n(/*! ./../utils */18));function o(){if("function"!==typeof WeakMap)return null;var t=new WeakMap;return o=function(){return t},t}function i(t){if(t&&t.__esModule)return t;if(null===t||"object"!==typeof t&&"function"!==typeof t)return{default:t};var e=o();if(e&&e.has(t))return e.get(t);var n={},r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var a=r?Object.getOwnPropertyDescriptor(t,i):null;a&&(a.get||a.set)?Object.defineProperty(n,i,a):n[i]=t[i]}return n.default=t,e&&e.set(t,n),n}function a(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function s(t,e){if(!e)return t;var n;if(r.isURLSearchParams(e))n=e.toString();else{var o=[];r.forEach(e,(function(t,e){null!==t&&"undefined"!==typeof t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,(function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),o.push(a(e)+"="+a(t))})))})),n=o.join("&")}if(n){var i=t.indexOf("#");-1!==i&&(t=t.slice(0,i)),t+=(-1===t.indexOf("?")?"?":"&")+n}return t}},18:
/*!*********************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/utils.js ***!
  \*********************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isArray=o,e.isObject=i,e.isDate=a,e.isURLSearchParams=s,e.forEach=c,e.isBoolean=u,e.isPlainObject=l,e.deepMerge=f,e.isUndefined=p;var r=Object.prototype.toString;function o(t){return"[object Array]"===r.call(t)}function i(t){return null!==t&&"object"===typeof t}function a(t){return"[object Date]"===r.call(t)}function s(t){return"undefined"!==typeof URLSearchParams&&t instanceof URLSearchParams}function c(t,e){if(null!==t&&"undefined"!==typeof t)if("object"!==typeof t&&(t=[t]),o(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.call(null,t[i],i,t)}function u(t){return"boolean"===typeof t}function l(t){return"[object Object]"===Object.prototype.toString.call(t)}function f(){var t={};function e(e,n){"object"===typeof t[n]&&"object"===typeof e?t[n]=f(t[n],e):t[n]="object"===typeof e?f({},e):e}for(var n=0,r=arguments.length;n<r;n++)c(arguments[n],e);return t}function p(t){return"undefined"===typeof t}},19:
/*!**********************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/core/buildFullPath.js ***!
  \**********************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=a;var r=i(n(/*! ../helpers/isAbsoluteURL */20)),o=i(n(/*! ../helpers/combineURLs */21));function i(t){return t&&t.__esModule?t:{default:t}}function a(t,e){return t&&!(0,r.default)(e)?(0,o.default)(t,e):e}},2:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */function(t,e,n){"use strict";n.r(e),function(t){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
var n=Object.freeze({});function r(t){return void 0===t||null===t}function o(t){return void 0!==t&&null!==t}function i(t){return!0===t}function a(t){return!1===t}function s(t){return"string"===typeof t||"number"===typeof t||"symbol"===typeof t||"boolean"===typeof t}function c(t){return null!==t&&"object"===typeof t}var u=Object.prototype.toString;function l(t){return u.call(t).slice(8,-1)}function f(t){return"[object Object]"===u.call(t)}function p(t){return"[object RegExp]"===u.call(t)}function h(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return o(t)&&"function"===typeof t.then&&"function"===typeof t.catch}function v(t){return null==t?"":Array.isArray(t)||f(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function y(t){var e=parseFloat(t);return isNaN(e)?t:e}function g(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var m=g("slot,component",!0),_=g("key,ref,slot,slot-scope,is");function b(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var w=Object.prototype.hasOwnProperty;function O(t,e){return w.call(t,e)}function S(t){var e=Object.create(null);return function(n){var r=e[n];return r||(e[n]=t(n))}}var $=/-(\w)/g,j=S((function(t){return t.replace($,(function(t,e){return e?e.toUpperCase():""}))})),A=S((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),x=/\B([A-Z])/g,k=S((function(t){return t.replace(x,"-$1").toLowerCase()}));function P(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n}function D(t,e){return t.bind(e)}var E=Function.prototype.bind?D:P;function C(t,e){e=e||0;var n=t.length-e,r=new Array(n);while(n--)r[n]=t[n+e];return r}function U(t,e){for(var n in e)t[n]=e[n];return t}function T(t){for(var e={},n=0;n<t.length;n++)t[n]&&U(e,t[n]);return e}function M(t,e,n){}var I=function(t,e,n){return!1},L=function(t){return t};function N(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every((function(t,n){return N(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(o||i)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every((function(n){return N(t[n],e[n])}))}catch(u){return!1}}function B(t,e){for(var n=0;n<t.length;n++)if(N(t[n],e))return n;return-1}function R(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var V=["component","directive","filter"],H=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:I,isReservedAttr:I,isUnknownElement:I,getTagNamespace:M,parsePlatformTagName:L,mustUseProp:I,async:!0,_lifecycleHooks:H},z=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function q(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function G(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^"+z.source+".$_\\d]");function J(t){if(!W.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}var K,Y="__proto__"in{},Q="undefined"!==typeof window,X="undefined"!==typeof WXEnvironment&&!!WXEnvironment.platform,Z=X&&WXEnvironment.platform.toLowerCase(),tt=Q&&window.navigator.userAgent.toLowerCase(),et=tt&&/msie|trident/.test(tt),nt=(tt&&tt.indexOf("msie 9.0"),tt&&tt.indexOf("edge/")>0),rt=(tt&&tt.indexOf("android"),tt&&/iphone|ipad|ipod|ios/.test(tt)||"ios"===Z),ot=(tt&&/chrome\/\d+/.test(tt),tt&&/phantomjs/.test(tt),tt&&tt.match(/firefox\/(\d+)/),{}.watch);if(Q)try{var it={};Object.defineProperty(it,"passive",{get:function(){}}),window.addEventListener("test-passive",null,it)}catch(Io){}var at=function(){return void 0===K&&(K=!Q&&!X&&"undefined"!==typeof t&&(t["process"]&&"server"===t["process"].env.VUE_ENV)),K},st=Q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ct(t){return"function"===typeof t&&/native code/.test(t.toString())}var ut,lt="undefined"!==typeof Symbol&&ct(Symbol)&&"undefined"!==typeof Reflect&&ct(Reflect.ownKeys);ut="undefined"!==typeof Set&&ct(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ft=M,pt=M,ht=M,dt=M,vt="undefined"!==typeof console,yt=/(?:^|[-_])(\w)/g,gt=function(t){return t.replace(yt,(function(t){return t.toUpperCase()})).replace(/[-_]/g,"")};ft=function(t,e){var n=e?ht(e):"";F.warnHandler?F.warnHandler.call(null,t,e,n):vt&&!F.silent&&console.error("[Vue warn]: "+t+n)},pt=function(t,e){vt&&!F.silent&&console.warn("[Vue tip]: "+t+(e?ht(e):""))},dt=function(t,e){if(t.$root===t)return t.$options&&t.$options.__file?""+t.$options.__file:"<Root>";var n="function"===typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var i=o.match(/([^/\\]+)\.vue$/);r=i&&i[1]}return(r?"<"+gt(r)+">":"<Anonymous>")+(o&&!1!==e?" at "+o:"")};var mt=function(t,e){var n="";while(e)e%2===1&&(n+=t),e>1&&(t+=t),e>>=1;return n};ht=function(t){if(t._isVue&&t.$parent){var e=[],n=0;while(t&&"PageBody"!==t.$options.name){if(e.length>0){var r=e[e.length-1];if(r.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[r,n],n=0)}!t.$options.isReserved&&e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map((function(t,e){return""+(0===e?"---\x3e ":mt(" ",5+2*e))+(Array.isArray(t)?dt(t[0])+"... ("+t[1]+" recursive calls)":dt(t))})).join("\n")}return"\n\n(found in "+dt(t)+")"};var _t=0,bt=function(){this.id=_t++,this.subs=[]};function wt(t){bt.SharedObject.targetStack.push(t),bt.SharedObject.target=t,bt.target=t}function Ot(){bt.SharedObject.targetStack.pop(),bt.SharedObject.target=bt.SharedObject.targetStack[bt.SharedObject.targetStack.length-1],bt.target=bt.SharedObject.target}bt.prototype.addSub=function(t){this.subs.push(t)},bt.prototype.removeSub=function(t){b(this.subs,t)},bt.prototype.depend=function(){bt.SharedObject.target&&bt.SharedObject.target.addDep(this)},bt.prototype.notify=function(){var t=this.subs.slice();F.async||t.sort((function(t,e){return t.id-e.id}));for(var e=0,n=t.length;e<n;e++)t[e].update()},bt.SharedObject={},bt.SharedObject.target=null,bt.SharedObject.targetStack=[];var St=function(t,e,n,r,o,i,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},$t={child:{configurable:!0}};$t.child.get=function(){return this.componentInstance},Object.defineProperties(St.prototype,$t);var jt=function(t){void 0===t&&(t="");var e=new St;return e.text=t,e.isComment=!0,e};function At(t){return new St(void 0,void 0,void 0,String(t))}function xt(t){var e=new St(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var kt=Array.prototype,Pt=Object.create(kt),Dt=["push","pop","shift","unshift","splice","sort","reverse"];Dt.forEach((function(t){var e=kt[t];G(Pt,t,(function(){var n=[],r=arguments.length;while(r--)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2);break}return o&&a.observeArray(o),a.dep.notify(),i}))}));var Et=Object.getOwnPropertyNames(Pt),Ct=!0;function Ut(t){Ct=t}var Tt=function(t){this.value=t,this.dep=new bt,this.vmCount=0,G(t,"__ob__",this),Array.isArray(t)?(Y?t.push!==t.__proto__.push?It(t,Pt,Et):Mt(t,Pt):It(t,Pt,Et),this.observeArray(t)):this.walk(t)};function Mt(t,e){t.__proto__=e}function It(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];G(t,i,e[i])}}function Lt(t,e){var n;if(c(t)&&!(t instanceof St))return O(t,"__ob__")&&t.__ob__ instanceof Tt?n=t.__ob__:Ct&&!at()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Tt(t)),e&&n&&n.vmCount++,n}function Nt(t,e,n,r,o){var i=new bt,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=t[e]);var u=!o&&Lt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return bt.SharedObject.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(e)&&Vt(e))),e},set:function(e){var a=s?s.call(t):n;e===a||e!==e&&a!==a||(r&&r(),s&&!c||(c?c.call(t,e):n=e,u=!o&&Lt(e),i.notify()))}})}}function Bt(t,e,n){if((r(t)||s(t))&&ft("Cannot set reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&h(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var o=t.__ob__;return t._isVue||o&&o.vmCount?(ft("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):o?(Nt(o.value,e,n),o.dep.notify(),n):(t[e]=n,n)}function Rt(t,e){if((r(t)||s(t))&&ft("Cannot delete reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&h(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount?ft("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):O(t,e)&&(delete t[e],n&&n.dep.notify())}}function Vt(t){for(var e=void 0,n=0,r=t.length;n<r;n++)e=t[n],e&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Vt(e)}Tt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Nt(t,e[n])},Tt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Lt(t[e])};var Ht=F.optionMergeStrategies;function Ft(t,e){if(!e)return t;for(var n,r,o,i=lt?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++)n=i[a],"__ob__"!==n&&(r=t[n],o=e[n],O(t,n)?r!==o&&f(r)&&f(o)&&Ft(r,o):Bt(t,n,o));return t}function zt(t,e,n){return n?function(){var r="function"===typeof e?e.call(n,n):e,o="function"===typeof t?t.call(n,n):t;return r?Ft(r,o):o}:e?t?function(){return Ft("function"===typeof e?e.call(this,this):e,"function"===typeof t?t.call(this,this):t)}:e:t}function qt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?Gt(n):n}function Gt(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}function Wt(t,e,n,r){var o=Object.create(t||null);return e?(te(r,e,n),U(o,e)):o}Ht.el=Ht.propsData=function(t,e,n,r){return n||ft('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Jt(t,e)},Ht.data=function(t,e,n){return n?zt(t,e,n):e&&"function"!==typeof e?(ft('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):zt(t,e)},H.forEach((function(t){Ht[t]=qt})),V.forEach((function(t){Ht[t+"s"]=Wt})),Ht.watch=function(t,e,n,r){if(t===ot&&(t=void 0),e===ot&&(e=void 0),!e)return Object.create(t||null);if(te(r,e,n),!t)return e;var o={};for(var i in U(o,t),e){var a=o[i],s=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Ht.props=Ht.methods=Ht.inject=Ht.computed=function(t,e,n,r){if(e&&te(r,e,n),!t)return e;var o=Object.create(null);return U(o,t),e&&U(o,e),o},Ht.provide=zt;var Jt=function(t,e){return void 0===e?t:e};function Kt(t){for(var e in t.components)Yt(e)}function Yt(t){new RegExp("^[a-zA-Z][\\-\\.0-9_"+z.source+"]*$").test(t)||ft('Invalid component name: "'+t+'". Component names should conform to valid custom element name in html5 specification.'),(m(t)||F.isReservedTag(t))&&ft("Do not use built-in or reserved HTML elements as component id: "+t)}function Qt(t,e){var n=t.props;if(n){var r,o,i,a={};if(Array.isArray(n)){r=n.length;while(r--)o=n[r],"string"===typeof o?(i=j(o),a[i]={type:null}):ft("props must be strings when using array syntax.")}else if(f(n))for(var s in n)o=n[s],i=j(s),a[i]=f(o)?o:{type:o};else ft('Invalid value for option "props": expected an Array or an Object, but got '+l(n)+".",e);t.props=a}}function Xt(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var a=n[i];r[i]=f(a)?U({from:i},a):{from:a}}else ft('Invalid value for option "inject": expected an Array or an Object, but got '+l(n)+".",e)}}function Zt(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"===typeof r&&(e[n]={bind:r,update:r})}}function te(t,e,n){f(e)||ft('Invalid value for option "'+t+'": expected an Object, but got '+l(e)+".",n)}function ee(t,e,n){if(Kt(e),"function"===typeof e&&(e=e.options),Qt(e,n),Xt(e,n),Zt(e),!e._base&&(e.extends&&(t=ee(t,e.extends,n)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)t=ee(t,e.mixins[r],n);var i,a={};for(i in t)s(i);for(i in e)O(t,i)||s(i);function s(r){var o=Ht[r]||Jt;a[r]=o(t[r],e[r],n,r)}return a}function ne(t,e,n,r){if("string"===typeof n){var o=t[e];if(O(o,n))return o[n];var i=j(n);if(O(o,i))return o[i];var a=A(i);if(O(o,a))return o[a];var s=o[n]||o[i]||o[a];return r&&!s&&ft("Failed to resolve "+e.slice(0,-1)+": "+n,t),s}}function re(t,e,n,r){var o=e[t],i=!O(n,t),a=n[t],s=le(Boolean,o.type);if(s>-1)if(i&&!O(o,"default"))a=!1;else if(""===a||a===k(t)){var c=le(String,o.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=oe(r,o,t);var u=Ct;Ut(!0),Lt(a),Ut(u)}return ie(o,t,a,r,i),a}function oe(t,e,n){if(O(e,"default")){var r=e.default;return c(r)&&ft('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t),t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"===typeof r&&"Function"!==ce(e.type)?r.call(t):r}}function ie(t,e,n,r,o){if(t.required&&o)ft('Missing required prop: "'+e+'"',r);else if(null!=n||t.required){var i=t.type,a=!i||!0===i,s=[];if(i){Array.isArray(i)||(i=[i]);for(var c=0;c<i.length&&!a;c++){var u=se(n,i[c]);s.push(u.expectedType||""),a=u.valid}}if(a){var l=t.validator;l&&(l(n)||ft('Invalid prop: custom validator check failed for prop "'+e+'".',r))}else ft(fe(e,n,s),r)}}var ae=/^(String|Number|Boolean|Function|Symbol)$/;function se(t,e){var n,r=ce(e);if(ae.test(r)){var o=typeof t;n=o===r.toLowerCase(),n||"object"!==o||(n=t instanceof e)}else n="Object"===r?f(t):"Array"===r?Array.isArray(t):t instanceof e;return{valid:n,expectedType:r}}function ce(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function ue(t,e){return ce(t)===ce(e)}function le(t,e){if(!Array.isArray(e))return ue(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(ue(e[n],t))return n;return-1}function fe(t,e,n){var r='Invalid prop: type check failed for prop "'+t+'". Expected '+n.map(A).join(", "),o=n[0],i=l(e),a=pe(e,o),s=pe(e,i);return 1===n.length&&he(o)&&!de(o,i)&&(r+=" with value "+a),r+=", got "+i+" ",he(i)&&(r+="with value "+s+"."),r}function pe(t,e){return"String"===e?'"'+t+'"':"Number"===e?""+Number(t):""+t}function he(t){var e=["string","number","boolean"];return e.some((function(e){return t.toLowerCase()===e}))}function de(){var t=[],e=arguments.length;while(e--)t[e]=arguments[e];return t.some((function(t){return"boolean"===t.toLowerCase()}))}function ve(t,e,n){wt();try{if(e){var r=e;while(r=r.$parent){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var a=!1===o[i].call(r,t,e,n);if(a)return}catch(Io){ge(Io,r,"errorCaptured hook")}}}ge(t,e,n)}finally{Ot()}}function ye(t,e,n,r,o){var i;try{i=n?t.apply(e,n):t.call(e),i&&!i._isVue&&d(i)&&!i._handled&&(i.catch((function(t){return ve(t,r,o+" (Promise/async)")})),i._handled=!0)}catch(Io){ve(Io,r,o)}return i}function ge(t,e,n){if(F.errorHandler)try{return F.errorHandler.call(null,t,e,n)}catch(Io){Io!==t&&me(Io,null,"config.errorHandler")}me(t,e,n)}function me(t,e,n){if(ft("Error in "+n+': "'+t.toString()+'"',e),!Q&&!X||"undefined"===typeof console)throw t;console.error(t)}var _e,be,we=[],Oe=!1;function Se(){Oe=!1;var t=we.slice(0);we.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!==typeof Promise&&ct(Promise)){var $e=Promise.resolve();_e=function(){$e.then(Se),rt&&setTimeout(M)}}else if(et||"undefined"===typeof MutationObserver||!ct(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())_e="undefined"!==typeof setImmediate&&ct(setImmediate)?function(){setImmediate(Se)}:function(){setTimeout(Se,0)};else{var je=1,Ae=new MutationObserver(Se),xe=document.createTextNode(String(je));Ae.observe(xe,{characterData:!0}),_e=function(){je=(je+1)%2,xe.data=String(je)}}function ke(t,e){var n;if(we.push((function(){if(t)try{t.call(e)}catch(Io){ve(Io,e,"nextTick")}else n&&n(e)})),Oe||(Oe=!0,_e()),!t&&"undefined"!==typeof Promise)return new Promise((function(t){n=t}))}var Pe=g("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),De=function(t,e){ft('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},Ee=function(t,e){ft('Property "'+e+'" must be accessed with "$data.'+e+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',t)},Ce="undefined"!==typeof Proxy&&ct(Proxy);if(Ce){var Ue=g("stop,prevent,self,ctrl,shift,alt,meta,exact");F.keyCodes=new Proxy(F.keyCodes,{set:function(t,e,n){return Ue(e)?(ft("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var Te={has:function(t,e){var n=e in t,r=Pe(e)||"string"===typeof e&&"_"===e.charAt(0)&&!(e in t.$data);return n||r||(e in t.$data?Ee(t,e):De(t,e)),n||!r}},Me={get:function(t,e){return"string"!==typeof e||e in t||(e in t.$data?Ee(t,e):De(t,e)),t[e]}};be=function(t){if(Ce){var e=t.$options,n=e.render&&e.render._withStripped?Me:Te;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var Ie,Le,Ne=new ut;function Be(t){Re(t,Ne),Ne.clear()}function Re(t,e){var n,r,o=Array.isArray(t);if(!(!o&&!c(t)||Object.isFrozen(t)||t instanceof St)){if(t.__ob__){var i=t.__ob__.dep.id;if(e.has(i))return;e.add(i)}if(o){n=t.length;while(n--)Re(t[n],e)}else{r=Object.keys(t),n=r.length;while(n--)Re(t[r[n]],e)}}}var Ve=Q&&window.performance;Ve&&Ve.mark&&Ve.measure&&Ve.clearMarks&&Ve.clearMeasures&&(Ie=function(t){return Ve.mark(t)},Le=function(t,e,n){Ve.measure(t,e,n),Ve.clearMarks(e),Ve.clearMarks(n)});var He=S((function(t){var e="&"===t.charAt(0);t=e?t.slice(1):t;var n="~"===t.charAt(0);t=n?t.slice(1):t;var r="!"===t.charAt(0);return t=r?t.slice(1):t,{name:t,once:n,capture:r,passive:e}}));function Fe(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return ye(r,null,arguments,e,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)ye(o[i],null,t,e,"v-on handler")}return n.fns=t,n}function ze(t,e,n,o,a,s){var c,u,l,f;for(c in t)u=t[c],l=e[c],f=He(c),r(u)?ft('Invalid handler for event "'+f.name+'": got '+String(u),s):r(l)?(r(u.fns)&&(u=t[c]=Fe(u,s)),i(f.once)&&(u=t[c]=a(f.name,u,f.capture)),n(f.name,u,f.capture,f.passive,f.params)):u!==l&&(l.fns=u,t[c]=l);for(c in e)r(t[c])&&(f=He(c),o(f.name,e[c],f.capture))}function qe(t,e,n,i){var a=e.options.mpOptions&&e.options.mpOptions.properties;if(r(a))return n;var s=e.options.mpOptions.externalClasses||[],c=t.attrs,u=t.props;if(o(c)||o(u))for(var l in a){var f=k(l),p=We(n,u,l,f,!0)||We(n,c,l,f,!1);p&&n[l]&&-1!==s.indexOf(f)&&i[j(n[l])]&&(n[l]=i[j(n[l])])}return n}function Ge(t,e,n,i){var a=e.options.props;if(r(a))return qe(t,e,{},i);var s={},c=t.attrs,u=t.props;if(o(c)||o(u))for(var l in a){var f=k(l),p=l.toLowerCase();l!==p&&c&&O(c,p)&&pt('Prop "'+p+'" is passed to component '+dt(n||e)+', but the declared prop name is "'+l+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+f+'" instead of "'+l+'".'),We(s,u,l,f,!0)||We(s,c,l,f,!1)}return qe(t,e,s,i)}function We(t,e,n,r,i){if(o(e)){if(O(e,n))return t[n]=e[n],i||delete e[n],!0;if(O(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function Je(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}function Ke(t){return s(t)?[At(t)]:Array.isArray(t)?Qe(t):void 0}function Ye(t){return o(t)&&o(t.text)&&a(t.isComment)}function Qe(t,e){var n,a,c,u,l=[];for(n=0;n<t.length;n++)a=t[n],r(a)||"boolean"===typeof a||(c=l.length-1,u=l[c],Array.isArray(a)?a.length>0&&(a=Qe(a,(e||"")+"_"+n),Ye(a[0])&&Ye(u)&&(l[c]=At(u.text+a[0].text),a.shift()),l.push.apply(l,a)):s(a)?Ye(u)?l[c]=At(u.text+a):""!==a&&l.push(At(a)):Ye(a)&&Ye(u)?l[c]=At(u.text+a.text):(i(t._isVList)&&o(a.tag)&&r(a.key)&&o(e)&&(a.key="__vlist"+e+"_"+n+"__"),l.push(a)));return l}function Xe(t){var e=t.$options.provide;e&&(t._provided="function"===typeof e?e.call(t):e)}function Ze(t){var e=tn(t.$options.inject,t);e&&(Ut(!1),Object.keys(e).forEach((function(n){Nt(t,n,e[n],(function(){ft('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)}))})),Ut(!0))}function tn(t,e){if(t){for(var n=Object.create(null),r=lt?Reflect.ownKeys(t):Object.keys(t),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){var a=t[i].from,s=e;while(s){if(s._provided&&O(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[i]){var c=t[i].default;n[i]="function"===typeof c?c.call(e):c}else ft('Injection "'+i+'" not found',e)}}return n}}function en(t,e){if(!t||!t.length)return{};for(var n={},r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)i.asyncMeta&&i.asyncMeta.data&&"page"===i.asyncMeta.data.slot?(n["page"]||(n["page"]=[])).push(i):(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(nn)&&delete n[u];return n}function nn(t){return t.isComment&&!t.asyncFactory||" "===t.text}function rn(t,e,r){var o,i=Object.keys(e).length>0,a=t?!!t.$stable:!i,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(a&&r&&r!==n&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in o={},t)t[c]&&"$"!==c[0]&&(o[c]=on(e,c,t[c]))}else o={};for(var u in e)u in o||(o[u]=an(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),G(o,"$stable",a),G(o,"$key",s),G(o,"$hasNormal",i),o}function on(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return t=t&&"object"===typeof t&&!Array.isArray(t)?[t]:Ke(t),t&&(0===t.length||1===t.length&&t[0].isComment)?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function an(t,e){return function(){return t[e]}}function sn(t,e){var n,r,i,a,s;if(Array.isArray(t)||"string"===typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r,r,r);else if("number"===typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r,r,r);else if(c(t))if(lt&&t[Symbol.iterator]){n=[];var u=t[Symbol.iterator](),l=u.next();while(!l.done)n.push(e(l.value,n.length,r++,r)),l=u.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)s=a[r],n[r]=e(t[s],s,r,r);return o(n)||(n=[]),n._isVList=!0,n}function cn(t,e,n,r){var o,i=this.$scopedSlots[t];i?(n=n||{},r&&(c(r)||ft("slot v-bind without argument expects an Object",this),n=U(U({},r),n)),o=i(n,this,n._i)||e):o=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function un(t){return ne(this.$options,"filters",t,!0)||L}function ln(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function fn(t,e,n,r,o){var i=F.keyCodes[e]||n;return o&&r&&!F.keyCodes[e]?ln(o,r):i?ln(i,t):r?k(r)!==e:void 0}function pn(t,e,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=T(n));var a=function(a){if("class"===a||"style"===a||_(a))i=t;else{var s=t.attrs&&t.attrs.type;i=r||F.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var c=j(a),u=k(a);if(!(c in i)&&!(u in i)&&(i[a]=n[a],o)){var l=t.on||(t.on={});l["update:"+a]=function(t){n[a]=t}}};for(var s in n)a(s)}else ft("v-bind without argument expects an Object or Array value",this);return t}function hn(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e||(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),vn(r,"__static__"+t,!1)),r}function dn(t,e,n){return vn(t,"__once__"+e+(n?"_"+n:""),!0),t}function vn(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!==typeof t[r]&&yn(t[r],e+"_"+r,n);else yn(t,e,n)}function yn(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function gn(t,e){if(e)if(f(e)){var n=t.on=t.on?U({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else ft("v-on without argument expects an Object value",this);return t}function mn(t,e,n,r){e=e||{$stable:!n};for(var o=0;o<t.length;o++){var i=t[o];Array.isArray(i)?mn(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function _n(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"===typeof r&&r?t[e[n]]=e[n+1]:""!==r&&null!==r&&ft("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return t}function bn(t,e){return"string"===typeof t?e+t:t}function wn(t){t._o=dn,t._n=y,t._s=v,t._l=sn,t._t=cn,t._q=N,t._i=B,t._m=hn,t._f=un,t._k=fn,t._b=pn,t._v=At,t._e=jt,t._u=mn,t._g=gn,t._d=_n,t._p=bn}function On(t,e,r,o,a){var s,c=this,u=a.options;O(o,"_uid")?(s=Object.create(o),s._original=o):(s=o,o=o._original);var l=i(u._compiled),f=!l;this.data=t,this.props=e,this.children=r,this.parent=o,this.listeners=t.on||n,this.injections=tn(u.inject,o),this.slots=function(){return c.$slots||rn(t.scopedSlots,c.$slots=en(r,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return rn(t.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=rn(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(t,e,n,r){var i=Mn(s,t,e,n,r,f);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return Mn(s,t,e,n,r,f)}}function Sn(t,e,r,i,a){var s=t.options,c={},u=s.props;if(o(u))for(var l in u)c[l]=re(l,u,e||n);else o(r.attrs)&&jn(c,r.attrs),o(r.props)&&jn(c,r.props);var f=new On(r,c,a,i,t),p=s.render.call(null,f._c,f);if(p instanceof St)return $n(p,r,f.parent,s,f);if(Array.isArray(p)){for(var h=Ke(p)||[],d=new Array(h.length),v=0;v<h.length;v++)d[v]=$n(h[v],r,f.parent,s,f);return d}}function $n(t,e,n,r,o){var i=xt(t);return i.fnContext=n,i.fnOptions=r,(i.devtoolsMeta=i.devtoolsMeta||{}).renderContext=o,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function jn(t,e){for(var n in e)t[j(n)]=e[n]}wn(On.prototype);var An={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;An.prepatch(n,n)}else{var r=t.componentInstance=Pn(t,tr);r.$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions,r=e.componentInstance=t.componentInstance;ir(r,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(ur(n,"onServiceCreated"),ur(n,"onServiceAttached"),n._isMounted=!0,ur(n,"mounted")),t.data.keepAlive&&(e._isMounted?Sr(n):sr(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?cr(e,!0):e.$destroy())}},xn=Object.keys(An);function kn(t,e,n,a,s){if(!r(t)){var u=n.$options._base;if(c(t)&&(t=u.extend(t)),"function"===typeof t){var l;if(r(t.cid)&&(l=t,t=qn(l,u),void 0===t))return zn(l,e,n,a,s);e=e||{},Gr(t),o(e.model)&&Cn(t.options,e);var f=Ge(e,t,s,n);if(i(t.options.functional))return Sn(t,f,e,n,a);var p=e.on;if(e.on=e.nativeOn,i(t.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}Dn(e);var d=t.options.name||s,v=new St("vue-component-"+t.cid+(d?"-"+d:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:f,listeners:p,tag:s,children:a},l);return v}ft("Invalid Component definition: "+String(t),n)}}function Pn(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}function Dn(t){for(var e=t.hook||(t.hook={}),n=0;n<xn.length;n++){var r=xn[n],o=e[r],i=An[r];o===i||o&&o._merged||(e[r]=o?En(i,o):i)}}function En(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}function Cn(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[r],s=e.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(i[r]=[s].concat(a)):i[r]=s}var Un=1,Tn=2;function Mn(t,e,n,r,o,a){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),i(a)&&(o=Tn),In(t,e,n,r,o)}function In(t,e,n,r,i){if(o(n)&&o(n.__ob__))return ft("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",t),jt();if(o(n)&&o(n.is)&&(e=n.is),!e)return jt();var a,c,u;(o(n)&&o(n.key)&&!s(n.key)&&ft("Avoid using non-primitive value as key, use string/number value instead.",t),Array.isArray(r)&&"function"===typeof r[0]&&(n=n||{},n.scopedSlots={default:r[0]},r.length=0),i===Tn?r=Ke(r):i===Un&&(r=Je(r)),"string"===typeof e)?(c=t.$vnode&&t.$vnode.ns||F.getTagNamespace(e),F.isReservedTag(e)?(o(n)&&o(n.nativeOn)&&ft("The .native modifier for v-on is only valid on components but it was used on <"+e+">.",t),a=new St(F.parsePlatformTagName(e),n,r,void 0,void 0,t)):a=n&&n.pre||!o(u=ne(t.$options,"components",e))?new St(e,n,r,void 0,void 0,t):kn(u,n,t,r,e)):a=kn(e,n,t,r);return Array.isArray(a)?a:o(a)?(o(c)&&Ln(a,c),o(n)&&Nn(n),a):jt()}function Ln(t,e,n){if(t.ns=e,"foreignObject"===t.tag&&(e=void 0,n=!0),o(t.children))for(var a=0,s=t.children.length;a<s;a++){var c=t.children[a];o(c.tag)&&(r(c.ns)||i(n)&&"svg"!==c.tag)&&Ln(c,e,n)}}function Nn(t){c(t.style)&&Be(t.style),c(t.class)&&Be(t.class)}function Bn(t){t._vnode=null,t._staticTrees=null;var e=t.$options,r=t.$vnode=e._parentVnode,o=r&&r.context;t.$slots=en(e._renderChildren,o),t.$scopedSlots=n,t._c=function(e,n,r,o){return Mn(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return Mn(t,e,n,r,o,!0)};var i=r&&r.data;Nt(t,"$attrs",i&&i.attrs||n,(function(){!er&&ft("$attrs is readonly.",t)}),!0),Nt(t,"$listeners",e._parentListeners||n,(function(){!er&&ft("$listeners is readonly.",t)}),!0)}var Rn,Vn=null;function Hn(t){wn(t.prototype),t.prototype.$nextTick=function(t){return ke(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,o=n._parentVnode;o&&(e.$scopedSlots=rn(o.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=o;try{Vn=e,t=r.call(e._renderProxy,e.$createElement)}catch(Io){if(ve(Io,e,"render"),e.$options.renderError)try{t=e.$options.renderError.call(e._renderProxy,e.$createElement,Io)}catch(Io){ve(Io,e,"renderError"),t=e._vnode}else t=e._vnode}finally{Vn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof St||(Array.isArray(t)&&ft("Multiple root nodes returned from render function. Render function should return a single root node.",e),t=jt()),t.parent=o,t}}function Fn(t,e){return(t.__esModule||lt&&"Module"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function zn(t,e,n,r,o){var i=jt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}function qn(t,e){if(i(t.error)&&o(t.errorComp))return t.errorComp;if(o(t.resolved))return t.resolved;var n=Vn;if(n&&o(t.owners)&&-1===t.owners.indexOf(n)&&t.owners.push(n),i(t.loading)&&o(t.loadingComp))return t.loadingComp;if(n&&!o(t.owners)){var a=t.owners=[n],s=!0,u=null,l=null;n.$on("hook:destroyed",(function(){return b(a,n)}));var f=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0,null!==u&&(clearTimeout(u),u=null),null!==l&&(clearTimeout(l),l=null))},p=R((function(n){t.resolved=Fn(n,e),s?a.length=0:f(!0)})),h=R((function(e){ft("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:"")),o(t.errorComp)&&(t.error=!0,f(!0))})),v=t(p,h);return c(v)&&(d(v)?r(t.resolved)&&v.then(p,h):d(v.component)&&(v.component.then(p,h),o(v.error)&&(t.errorComp=Fn(v.error,e)),o(v.loading)&&(t.loadingComp=Fn(v.loading,e),0===v.delay?t.loading=!0:u=setTimeout((function(){u=null,r(t.resolved)&&r(t.error)&&(t.loading=!0,f(!1))}),v.delay||200)),o(v.timeout)&&(l=setTimeout((function(){l=null,r(t.resolved)&&h("timeout ("+v.timeout+"ms)")}),v.timeout)))),s=!1,t.loading?t.loadingComp:t.resolved}}function Gn(t){return t.isComment&&t.asyncFactory}function Wn(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(o(n)&&(o(n.componentOptions)||Gn(n)))return n}}function Jn(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Xn(t,e)}function Kn(t,e){Rn.$on(t,e)}function Yn(t,e){Rn.$off(t,e)}function Qn(t,e){var n=Rn;return function r(){var o=e.apply(null,arguments);null!==o&&n.$off(t,r)}}function Xn(t,e,n){Rn=t,ze(e,n||{},Kn,Yn,Qn,t),Rn=void 0}function Zn(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var o=0,i=t.length;o<i;o++)r.$on(t[o],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)n.$off(t[r],e);return n}var i,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;var s=a.length;while(s--)if(i=a[s],i===e||i.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&pt('Event "'+n+'" is emitted in component '+dt(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+k(t)+'" instead of "'+t+'".');var r=e._events[t];if(r){r=r.length>1?C(r):r;for(var o=C(arguments,1),i='event handler for "'+t+'"',a=0,s=r.length;a<s;a++)ye(r[a],e,o,e,i)}return e}}var tr=null,er=!1;function nr(t){var e=tr;return tr=t,function(){tr=e}}function rr(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){while(n.$options.abstract&&n.$parent)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}function or(t){t.prototype._update=function(t,e){var n=this,r=n.$el,o=n._vnode,i=nr(n);n._vnode=t,n.$el=o?n.__patch__(o,t):n.__patch__(n.$el,t,e,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){var t=this;t._watcher&&t._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){ur(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||b(e.$children,t),t._watcher&&t._watcher.teardown();var n=t._watchers.length;while(n--)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),ur(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}function ir(t,e,r,o,i){er=!0;var a=o.data.scopedSlots,s=t.$scopedSlots,c=!!(a&&!a.$stable||s!==n&&!s.$stable||a&&t.$scopedSlots.$key!==a.$key),u=!!(i||t.$options._renderChildren||c);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||n,t.$listeners=r||n,e&&t.$options.props){Ut(!1);for(var l=t._props,f=t.$options._propKeys||[],p=0;p<f.length;p++){var h=f[p],d=t.$options.props;l[h]=re(h,d,e,t)}Ut(!0),t.$options.propsData=e}t._$updateProperties&&t._$updateProperties(t),r=r||n;var v=t.$options._parentListeners;t.$options._parentListeners=r,Xn(t,r,v),u&&(t.$slots=en(i,o.context),t.$forceUpdate()),er=!1}function ar(t){while(t&&(t=t.$parent))if(t._inactive)return!0;return!1}function sr(t,e){if(e){if(t._directInactive=!1,ar(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)sr(t.$children[n]);ur(t,"activated")}}function cr(t,e){if((!e||(t._directInactive=!0,!ar(t)))&&!t._inactive){t._inactive=!0;for(var n=0;n<t.$children.length;n++)cr(t.$children[n]);ur(t,"deactivated")}}function ur(t,e){wt();var n=t.$options[e],r=e+" hook";if(n)for(var o=0,i=n.length;o<i;o++)ye(n[o],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),Ot()}var lr=100,fr=[],pr=[],hr={},dr={},vr=!1,yr=!1,gr=0;function mr(){gr=fr.length=pr.length=0,hr={},dr={},vr=yr=!1}var _r=Date.now;if(Q&&!et){var br=window.performance;br&&"function"===typeof br.now&&_r()>document.createEvent("Event").timeStamp&&(_r=function(){return br.now()})}function wr(){var t,e;for(_r(),yr=!0,fr.sort((function(t,e){return t.id-e.id})),gr=0;gr<fr.length;gr++)if(t=fr[gr],t.before&&t.before(),e=t.id,hr[e]=null,t.run(),null!=hr[e]&&(dr[e]=(dr[e]||0)+1,dr[e]>lr)){ft("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=pr.slice(),r=fr.slice();mr(),$r(n),Or(r),st&&F.devtools&&st.emit("flush")}function Or(t){var e=t.length;while(e--){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&ur(r,"updated")}}function Sr(t){t._inactive=!1,pr.push(t)}function $r(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,sr(t[e],!0)}function jr(t){var e=t.id;if(null==hr[e]){if(hr[e]=!0,yr){var n=fr.length-1;while(n>gr&&fr[n].id>t.id)n--;fr.splice(n+1,0,t)}else fr.push(t);if(!vr){if(vr=!0,!F.async)return void wr();ke(wr)}}}var Ar=0,xr=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Ar,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ut,this.newDepIds=new ut,this.expression=e.toString(),"function"===typeof e?this.getter=e:(this.getter=J(e),this.getter||(this.getter=M,ft('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};xr.prototype.get=function(){var t;wt(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(Io){if(!this.user)throw Io;ve(Io,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Be(t),Ot(),this.cleanupDeps()}return t},xr.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},xr.prototype.cleanupDeps=function(){var t=this.deps.length;while(t--){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},xr.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():jr(this)},xr.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(Io){ve(Io,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},xr.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},xr.prototype.depend=function(){var t=this.deps.length;while(t--)this.deps[t].depend()},xr.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);var t=this.deps.length;while(t--)this.deps[t].removeSub(this);this.active=!1}};var kr={enumerable:!0,configurable:!0,get:M,set:M};function Pr(t,e,n){kr.get=function(){return this[e][n]},kr.set=function(t){this[e][n]=t},Object.defineProperty(t,n,kr)}function Dr(t){t._watchers=[];var e=t.$options;e.props&&Er(t,e.props),e.methods&&Br(t,e.methods),e.data?Cr(t):Lt(t._data={},!0),e.computed&&Mr(t,e.computed),e.watch&&e.watch!==ot&&Rr(t,e.watch)}function Er(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[],i=!t.$parent;i||Ut(!1);var a=function(a){o.push(a);var s=re(a,e,n,t),c=k(a);(_(c)||F.isReservedAttr(c))&&ft('"'+c+'" is a reserved attribute and cannot be used as component prop.',t),Nt(r,a,s,(function(){if(!i&&!er){if("mp-baidu"===t.mpHost)return;if("value"===a&&Array.isArray(t.$options.behaviors)&&-1!==t.$options.behaviors.indexOf("uni://form-field"))return;if(t._getFormData)return;var e=t.$parent;while(e){if(e.__next_tick_pending)return;e=e.$parent}ft("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',t)}})),a in t||Pr(t,"_props",a)};for(var s in e)a(s);Ut(!0)}function Cr(t){var e=t.$options.data;e=t._data="function"===typeof e?Ur(e,t):e||{},f(e)||(e={},ft("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));var n=Object.keys(e),r=t.$options.props,o=t.$options.methods,i=n.length;while(i--){var a=n[i];o&&O(o,a)&&ft('Method "'+a+'" has already been defined as a data property.',t),r&&O(r,a)?ft('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',t):q(a)||Pr(t,"_data",a)}Lt(e,!0)}function Ur(t,e){wt();try{return t.call(e,e)}catch(Io){return ve(Io,e,"data()"),{}}finally{Ot()}}var Tr={lazy:!0};function Mr(t,e){var n=t._computedWatchers=Object.create(null),r=at();for(var o in e){var i=e[o],a="function"===typeof i?i:i.get;null==a&&ft('Getter is missing for computed property "'+o+'".',t),r||(n[o]=new xr(t,a||M,M,Tr)),o in t?o in t.$data?ft('The computed property "'+o+'" is already defined in data.',t):t.$options.props&&o in t.$options.props&&ft('The computed property "'+o+'" is already defined as a prop.',t):Ir(t,o,i)}}function Ir(t,e,n){var r=!at();"function"===typeof n?(kr.get=r?Lr(e):Nr(n),kr.set=M):(kr.get=n.get?r&&!1!==n.cache?Lr(e):Nr(n.get):M,kr.set=n.set||M),kr.set===M&&(kr.set=function(){ft('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,kr)}function Lr(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),bt.SharedObject.target&&e.depend(),e.value}}function Nr(t){return function(){return t.call(this,this)}}function Br(t,e){var n=t.$options.props;for(var r in e)"function"!==typeof e[r]&&ft('Method "'+r+'" has type "'+typeof e[r]+'" in the component definition. Did you reference the function correctly?',t),n&&O(n,r)&&ft('Method "'+r+'" has already been defined as a prop.',t),r in t&&q(r)&&ft('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[r]="function"!==typeof e[r]?M:E(e[r],t)}function Rr(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Vr(t,n,r[o]);else Vr(t,n,r)}}function Vr(t,e,n,r){return f(n)&&(r=n,n=n.handler),"string"===typeof n&&(n=t[n]),t.$watch(e,n,r)}function Hr(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};e.set=function(){ft("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){ft("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=Bt,t.prototype.$delete=Rt,t.prototype.$watch=function(t,e,n){var r=this;if(f(e))return Vr(r,t,e,n);n=n||{},n.user=!0;var o=new xr(r,t,e,n);if(n.immediate)try{e.call(r,o.value)}catch(i){ve(i,r,'callback for immediate watcher "'+o.expression+'"')}return function(){o.teardown()}}}var Fr=0;function zr(t){t.prototype._init=function(t){var e,n,r=this;r._uid=Fr++,F.performance&&Ie&&(e="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,Ie(e)),r._isVue=!0,t&&t._isComponent?qr(r,t):r.$options=ee(Gr(r.constructor),t||{},r),be(r),r._self=r,rr(r),Jn(r),Bn(r),ur(r,"beforeCreate"),!r._$fallback&&Ze(r),Dr(r),!r._$fallback&&Xe(r),!r._$fallback&&ur(r,"created"),F.performance&&Ie&&(r._name=dt(r,!1),Ie(n),Le("vue "+r._name+" init",e,n)),r.$options.el&&r.$mount(r.$options.el)}}function qr(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}function Gr(t){var e=t.options;if(t.super){var n=Gr(t.super),r=t.superOptions;if(n!==r){t.superOptions=n;var o=Wr(t);o&&U(t.extendOptions,o),e=t.options=ee(n,t.extendOptions),e.name&&(e.components[e.name]=t)}}return e}function Wr(t){var e,n=t.options,r=t.sealedOptions;for(var o in n)n[o]!==r[o]&&(e||(e={}),e[o]=n[o]);return e}function Jr(t){this instanceof Jr||ft("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function Kr(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=C(arguments,1);return n.unshift(this),"function"===typeof t.install?t.install.apply(t,n):"function"===typeof t&&t.apply(null,n),e.push(t),this}}function Yr(t){t.mixin=function(t){return this.options=ee(this.options,t),this}}function Qr(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;i&&Yt(i);var a=function(t){this._init(t)};return a.prototype=Object.create(n.prototype),a.prototype.constructor=a,a.cid=e++,a.options=ee(n.options,t),a["super"]=n,a.options.props&&Xr(a),a.options.computed&&Zr(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,V.forEach((function(t){a[t]=n[t]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=U({},a.options),o[r]=a,a}}function Xr(t){var e=t.options.props;for(var n in e)Pr(t.prototype,"_props",n)}function Zr(t){var e=t.options.computed;for(var n in e)Ir(t.prototype,n,e[n])}function to(t){V.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&Yt(t),"component"===e&&f(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"===typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}function eo(t){return t&&(t.Ctor.options.name||t.tag)}function no(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"===typeof t?t.split(",").indexOf(e)>-1:!!p(t)&&t.test(e)}function ro(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var s=eo(a.componentOptions);s&&!e(s)&&oo(n,i,r,o)}}}function oo(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,b(n,e)}zr(Jr),Hr(Jr),Zn(Jr),or(Jr),Hn(Jr);var io=[String,RegExp,Array],ao={name:"keep-alive",abstract:!0,props:{include:io,exclude:io,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)oo(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",(function(e){ro(t,(function(t){return no(e,t)}))})),this.$watch("exclude",(function(e){ro(t,(function(t){return!no(e,t)}))}))},render:function(){var t=this.$slots.default,e=Wn(t),n=e&&e.componentOptions;if(n){var r=eo(n),o=this,i=o.include,a=o.exclude;if(i&&(!r||!no(i,r))||a&&r&&no(a,r))return e;var s=this,c=s.cache,u=s.keys,l=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;c[l]?(e.componentInstance=c[l].componentInstance,b(u,l),u.push(l)):(c[l]=e,u.push(l),this.max&&u.length>parseInt(this.max)&&oo(c,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}},so={KeepAlive:ao};function co(t){var e={get:function(){return F},set:function(){ft("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(t,"config",e),t.util={warn:ft,extend:U,mergeOptions:ee,defineReactive:Nt},t.set=Bt,t.delete=Rt,t.nextTick=ke,t.observable=function(t){return Lt(t),t},t.options=Object.create(null),V.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,U(t.options.components,so),Kr(t),Yr(t),Qr(t),to(t)}co(Jr),Object.defineProperty(Jr.prototype,"$isServer",{get:at}),Object.defineProperty(Jr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Jr,"FunctionalRenderContext",{value:On}),Jr.version="2.6.11";var uo="[object Array]",lo="[object Object]";function fo(t,e){var n={};return po(t,e),ho(t,e,"",n),n}function po(t,e){if(t!==e){var n=yo(t),r=yo(e);if(n==lo&&r==lo){if(Object.keys(t).length>=Object.keys(e).length)for(var o in e){var i=t[o];void 0===i?t[o]=null:po(i,e[o])}}else n==uo&&r==uo&&t.length>=e.length&&e.forEach((function(e,n){po(t[n],e)}))}}function ho(t,e,n,r){if(t!==e){var o=yo(t),i=yo(e);if(o==lo)if(i!=lo||Object.keys(t).length<Object.keys(e).length)vo(r,n,t);else{var a=function(o){var i=t[o],a=e[o],s=yo(i),c=yo(a);if(s!=uo&&s!=lo)i!=e[o]&&vo(r,(""==n?"":n+".")+o,i);else if(s==uo)c!=uo||i.length<a.length?vo(r,(""==n?"":n+".")+o,i):i.forEach((function(t,e){ho(t,a[e],(""==n?"":n+".")+o+"["+e+"]",r)}));else if(s==lo)if(c!=lo||Object.keys(i).length<Object.keys(a).length)vo(r,(""==n?"":n+".")+o,i);else for(var u in i)ho(i[u],a[u],(""==n?"":n+".")+o+"."+u,r)};for(var s in t)a(s)}else o==uo?i!=uo||t.length<e.length?vo(r,n,t):t.forEach((function(t,o){ho(t,e[o],n+"["+o+"]",r)})):vo(r,n,t)}}function vo(t,e,n){t[e]=n}function yo(t){return Object.prototype.toString.call(t)}function go(t){if(t.__next_tick_callbacks&&t.__next_tick_callbacks.length){if(Object({VUE_APP_NAME:"豆荚游戏财神版",VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG){var e=t.$scope;console.log("["+ +new Date+"]["+(e.is||e.route)+"]["+t._uid+"]:flushCallbacks["+t.__next_tick_callbacks.length+"]")}var n=t.__next_tick_callbacks.slice(0);t.__next_tick_callbacks.length=0;for(var r=0;r<n.length;r++)n[r]()}}function mo(t){return fr.find((function(e){return t._watcher===e}))}function _o(t,e){if(!t.__next_tick_pending&&!mo(t)){if(Object({VUE_APP_NAME:"豆荚游戏财神版",VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG){var n=t.$scope;console.log("["+ +new Date+"]["+(n.is||n.route)+"]["+t._uid+"]:nextVueTick")}return ke(e,t)}if(Object({VUE_APP_NAME:"豆荚游戏财神版",VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG){var r=t.$scope;console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+t._uid+"]:nextMPTick")}var o;if(t.__next_tick_callbacks||(t.__next_tick_callbacks=[]),t.__next_tick_callbacks.push((function(){if(e)try{e.call(t)}catch(Io){ve(Io,t,"nextTick")}else o&&o(t)})),!e&&"undefined"!==typeof Promise)return new Promise((function(t){o=t}))}function bo(t){var e=Object.create(null),n=[].concat(Object.keys(t._data||{}),Object.keys(t._computedWatchers||{}));n.reduce((function(e,n){return e[n]=t[n],e}),e);var r=t.__composition_api_state__||t.__secret_vfa_state__,o=r&&r.rawBindings;return o&&Object.keys(o).forEach((function(n){e[n]=t[n]})),Object.assign(e,t.$mp.data||{}),Array.isArray(t.$options.behaviors)&&-1!==t.$options.behaviors.indexOf("uni://form-field")&&(e["name"]=t.name,e["value"]=t.value),JSON.parse(JSON.stringify(e))}var wo=function(t,e){var n=this;if(null!==e&&("page"===this.mpType||"component"===this.mpType)){var r=this.$scope,o=Object.create(null);try{o=bo(this)}catch(s){console.error(s)}o.__webviewId__=r.data.__webviewId__;var i=Object.create(null);Object.keys(o).forEach((function(t){i[t]=r.data[t]}));var a=!1===this.$shouldDiffData?o:fo(o,i);Object.keys(a).length?(Object({VUE_APP_NAME:"豆荚游戏财神版",VUE_APP_PLATFORM:"mp-qq",NODE_ENV:"development",BASE_URL:"/"}).VUE_APP_DEBUG&&console.log("["+ +new Date+"]["+(r.is||r.route)+"]["+this._uid+"]差量更新",JSON.stringify(a)),this.__next_tick_pending=!0,r.setData(a,(function(){n.__next_tick_pending=!1,go(n)}))):go(this)}};function Oo(){}function So(t,e,n){if(!t.mpType)return t;"app"===t.mpType&&(t.$options.render=Oo),t.$options.render||(t.$options.render=Oo,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?ft("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):ft("Failed to mount component: template or render function not defined.",t)),!t._$fallback&&ur(t,"beforeMount");var r=function(){t._update(t._render(),n)};return new xr(t,r,M,{before:function(){t._isMounted&&!t._isDestroyed&&ur(t,"beforeUpdate")}},!0),n=!1,t}function $o(t,e){return o(t)||o(e)?jo(t,Ao(e)):""}function jo(t,e){return t?e?t+" "+e:t:e||""}function Ao(t){return Array.isArray(t)?xo(t):c(t)?ko(t):"string"===typeof t?t:""}function xo(t){for(var e,n="",r=0,i=t.length;r<i;r++)o(e=Ao(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}function ko(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}var Po=S((function(t){var e={},n=/;(?![^(]*\))/g,r=/:(.+)/;return t.split(n).forEach((function(t){if(t){var n=t.split(r);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}));function Do(t){return Array.isArray(t)?T(t):"string"===typeof t?Po(t):t}var Eo=["createSelectorQuery","createIntersectionObserver","selectAllComponents","selectComponent"];function Co(t,e){var n=e.split("."),r=n[0];return 0===r.indexOf("__$n")&&(r=parseInt(r.replace("__$n",""))),1===n.length?t[r]:Co(t[r],n.slice(1).join("."))}function Uo(t){t.config.errorHandler=function(e,n,r){t.util.warn("Error in "+r+': "'+e.toString()+'"',n),console.error(e);var o=getApp();o&&o.onError&&o.onError(e)};var e=t.prototype.$emit;t.prototype.$emit=function(t){return this.$scope&&t&&this.$scope["triggerEvent"](t,{__args__:C(arguments,1)}),e.apply(this,arguments)},t.prototype.$nextTick=function(t){return _o(this,t)},Eo.forEach((function(e){t.prototype[e]=function(t){return this.$scope&&this.$scope[e]?this.$scope[e](t):"undefined"!==typeof my?"createSelectorQuery"===e?my.createSelectorQuery(t):"createIntersectionObserver"===e?my.createIntersectionObserver(t):void 0:void 0}})),t.prototype.__init_provide=Xe,t.prototype.__init_injections=Ze,t.prototype.__call_hook=function(t,e){var n=this;wt();var r,o=n.$options[t],i=t+" hook";if(o)for(var a=0,s=o.length;a<s;a++)r=ye(o[a],n,e?[e]:null,n,i);return n._hasHookEvent&&n.$emit("hook:"+t,e),Ot(),r},t.prototype.__set_model=function(t,e,n,r){Array.isArray(r)&&(-1!==r.indexOf("trim")&&(n=n.trim()),-1!==r.indexOf("number")&&(n=this._n(n))),t||(t=this),t[e]=n},t.prototype.__set_sync=function(t,e,n){t||(t=this),t[e]=n},t.prototype.__get_orig=function(t){return f(t)&&t["$orig"]||t},t.prototype.__get_value=function(t,e){return Co(e||this,t)},t.prototype.__get_class=function(t,e){return $o(e,t)},t.prototype.__get_style=function(t,e){if(!t&&!e)return"";var n=Do(t),r=e?U(e,n):n;return Object.keys(r).map((function(t){return k(t)+":"+r[t]})).join(";")},t.prototype.__map=function(t,e){var n,r,o,i,a;if(Array.isArray(t)){for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);return n}if(c(t)){for(i=Object.keys(t),n=Object.create(null),r=0,o=i.length;r<o;r++)a=i[r],n[a]=e(t[a],a,r);return n}if("number"===typeof t){for(n=new Array(t),r=0,o=t;r<o;r++)n[r]=e(r,r);return n}return[]}}var To=["onLaunch","onShow","onHide","onUniNViewMessage","onPageNotFound","onThemeChange","onError","onUnhandledRejection","onLoad","onReady","onUnload","onPullDownRefresh","onReachBottom","onTabItemTap","onAddToFavorites","onShareTimeline","onShareAppMessage","onResize","onPageScroll","onNavigationBarButtonTap","onBackPress","onNavigationBarSearchInputChanged","onNavigationBarSearchInputConfirmed","onNavigationBarSearchInputClicked","onPageShow","onPageHide","onPageResize"];function Mo(t){var e=t.extend;t.extend=function(t){t=t||{};var n=t.methods;return n&&Object.keys(n).forEach((function(e){-1!==To.indexOf(e)&&(t[e]=n[e],delete n[e])})),e.call(this,t)};var n=t.config.optionMergeStrategies,r=n.created;To.forEach((function(t){n[t]=r})),t.prototype.__lifecycle_hooks__=To}Jr.prototype.__patch__=wo,Jr.prototype.$mount=function(t,e){return So(this,t,e)},Mo(Jr),Uo(Jr),e["default"]=Jr}.call(this,n(/*! ./../../../../../webpack/buildin/global.js */3))},20:
/*!*************************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/helpers/isAbsoluteURL.js ***!
  \*************************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";function r(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r},21:
/*!***********************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/helpers/combineURLs.js ***!
  \***********************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";function r(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r},22:
/*!***************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/core/settle.js ***!
  \***************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";function r(t,e,n){var r=n.config.validateStatus,o=n.statusCode;!o||r&&!r(o)?e(n):t(n)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r},23:
/*!***************************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/core/InterceptorManager.js ***!
  \***************************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";function r(){this.handlers=[]}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,r.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},r.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},r.prototype.forEach=function(t){this.handlers.forEach((function(e){null!==e&&t(e)}))};var o=r;e.default=o},24:
/*!********************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/core/mergeConfig.js ***!
  \********************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=n(/*! ../utils */18);function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var s=function(t,e,n){var o={};return t.forEach((function(t){(0,r.isUndefined)(n[t])?(0,r.isUndefined)(e[t])||(o[t]=e[t]):o[t]=n[t]})),o},c=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.method||t.method||"GET",o={baseURL:t.baseURL||"",method:n,url:e.url||"",params:e.params||{},custom:i(i({},t.custom||{}),e.custom||{}),header:(0,r.deepMerge)(t.header||{},e.header||{})},a=["getTask","validateStatus"];if(o=i(i({},o),s(a,t,e)),"DOWNLOAD"===n);else if("UPLOAD"===n){delete o.header["content-type"],delete o.header["Content-Type"];var c=["filePath","name","formData"];c.forEach((function(t){(0,r.isUndefined)(e[t])||(o[t]=e[t])}))}else{var u=["data","dataType","responseType"];o=i(i({},o),s(u,t,e))}return o};e.default=c},25:
/*!*****************************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/luch-request/luch-request/core/defaults.js ***!
  \*****************************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r={baseURL:"https://app1-api.qianr.com",header:{},method:"GET",dataType:"json",responseType:"text",custom:{},validateStatus:function(t){return t>=200&&t<300}};e.default=r},26:
/*!*******************************************************************!*\
  !*** D:/daima/2020/天天领红包/js_sdk/jiuai-debounce/jiuai-debounce.js ***!
  \*******************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r={a:{},canDoFunction:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.a[e.key]?e.fail&&e.fail():(this.lockKey(e.key),e.success&&e.success(),e.time&&setTimeout((function(){t.releaseKey(e.key)}),e.time))},releaseKey:function(t){delete this.a[t]},lockKey:function(t){this.a[t]=!0}};e.default=r},3:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(r){"object"===typeof window&&(n=window)}t.exports=n},33:
/*!**********************************************************************!*\
  !*** D:/daima/2020/天天领红包/components/mescroll-uni/mescroll-mixins.js ***!
  \**********************************************************************/
/*! no static exports found */function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r={data:function(){return{mescroll:null}},onPullDownRefresh:function(){this.mescroll&&this.mescroll.onPullDownRefresh()},onPageScroll:function(t){this.mescroll&&this.mescroll.onPageScroll(t)},onReachBottom:function(){this.mescroll&&this.mescroll.onReachBottom()},methods:{mescrollInit:function(t){this.mescroll=t,this.mescrollInitByRef()},mescrollInitByRef:function(){if(!this.mescroll||!this.mescroll.resetUpScroll){var t=this.$refs.mescrollRef;t&&(this.mescroll=t.mescroll)}},downCallback:function(){var t=this;this.mescroll.optUp.use?this.mescroll.resetUpScroll():setTimeout((function(){t.mescroll.endSuccess()}),500)},upCallback:function(){var t=this;setTimeout((function(){t.mescroll.endErr()}),500)}},mounted:function(){this.mescrollInitByRef()}},o=r;e.default=o},4:
/*!**************************************!*\
  !*** D:/daima/2020/天天领红包/pages.json ***!
  \**************************************/
/*! no static exports found */function(t,e){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,